-:    0:Source:test-src/SnmpParameterValidationTest.cpp
-:    1://------------------------------------------------------------------------------
-:    2:// Copyright (c) WAGO GmbH & Co. KG
-:    3://
-:    4:// PROPRIETARY RIGHTS are involved in the subject matter of this material. All
-:    5:// manufacturing, reproduction, use and sales rights pertaining to this
-:    6:// subject matter are governed by the license agreement. The recipient of this
-:    7:// software implicitly accepts the terms of the license.
-:    8://------------------------------------------------------------------------------
-:    9:
-:   10:#include <gtest/gtest.h>
-:   11:#include <gmock/gmock.h>
-:   12:
-:   13:#include <regex>
-:   14:
-:   15:#include "SnmpParameterValidation.hpp"
-:   16:
-:   17:namespace wago::snmp_config_lib {
-:   18:
4:   19:TEST(SnmpParameterValidation, validValues) {
-:   20:
1:   21:  ::std::string valid_value = "aB!?:;.,{}[]*~@123";
1:   22:  ::std::string match_error;
1*:   23:  EXPECT_TRUE(IsValidName(valid_value, match_error));
1*:   24:  EXPECT_TRUE(match_error.empty());
1*:   25:  EXPECT_TRUE(IsValidContact(valid_value, match_error));
1*:   26:  EXPECT_TRUE(match_error.empty());
1*:   27:  EXPECT_TRUE(IsValidDescription(valid_value, match_error));
1*:   28:  EXPECT_TRUE(match_error.empty());
1*:   29:  EXPECT_TRUE(IsValidLocation(valid_value, match_error));
1*:   30:  EXPECT_TRUE(match_error.empty());
-:   31:
2:   32:  ::std::string empty_value;
1*:   33:  EXPECT_TRUE(IsValidName(empty_value, match_error));
1*:   34:  EXPECT_TRUE(match_error.empty());
1*:   35:  EXPECT_TRUE(IsValidContact(empty_value, match_error));
1*:   36:  EXPECT_TRUE(match_error.empty());
1*:   37:  EXPECT_TRUE(IsValidDescription(empty_value, match_error));
1*:   38:  EXPECT_TRUE(match_error.empty());
1*:   39:  EXPECT_TRUE(IsValidLocation(empty_value, match_error));
1*:   40:  EXPECT_TRUE(match_error.empty());
1:   41:}
------------------
_ZN4wago15snmp_config_lib40SnmpParameterValidation_validValues_TestC2Ev:
function _ZN4wago15snmp_config_lib40SnmpParameterValidation_validValues_TestC2Ev called 1 returned 100% blocks executed 100%
1:   19:TEST(SnmpParameterValidation, validValues) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib40SnmpParameterValidation_validValues_TestD0Ev:
function _ZN4wago15snmp_config_lib40SnmpParameterValidation_validValues_TestD0Ev called 1 returned 100% blocks executed 100%
1:   19:TEST(SnmpParameterValidation, validValues) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib40SnmpParameterValidation_validValues_TestD2Ev:
function _ZN4wago15snmp_config_lib40SnmpParameterValidation_validValues_TestD2Ev called 1 returned 100% blocks executed 100%
1:   19:TEST(SnmpParameterValidation, validValues) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib40SnmpParameterValidation_validValues_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib40SnmpParameterValidation_validValues_Test8TestBodyEv called 1 returned 100% blocks executed 21%
1:   19:TEST(SnmpParameterValidation, validValues) {
-:   20:
1:   21:  ::std::string valid_value = "aB!?:;.,{}[]*~@123";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:   22:  ::std::string match_error;
call    0 returned 1
1*:   23:  EXPECT_TRUE(IsValidName(valid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   24:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1*:   25:  EXPECT_TRUE(IsValidContact(valid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   26:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1*:   27:  EXPECT_TRUE(IsValidDescription(valid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   28:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1*:   29:  EXPECT_TRUE(IsValidLocation(valid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   30:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
-:   31:
2:   32:  ::std::string empty_value;
call    0 returned 1
call    1 returned 1
call    2 never executed
1*:   33:  EXPECT_TRUE(IsValidName(empty_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   34:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1*:   35:  EXPECT_TRUE(IsValidContact(empty_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   36:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1*:   37:  EXPECT_TRUE(IsValidDescription(empty_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   38:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1*:   39:  EXPECT_TRUE(IsValidLocation(empty_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   40:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1:   41:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:   42:
4:   43:TEST(SnmpParameterValidation, invalidValues) {
1:   44:  ::std::string match_error;
-:   45:
1:   46:  ::std::string too_long(256, 'a');
1*:   47:  EXPECT_FALSE(IsValidName(too_long, match_error));
1*:   48:  EXPECT_EQ("the string can be up to 255 characters long.", match_error);
1*:   49:  EXPECT_FALSE(IsValidContact(too_long, match_error));
1*:   50:  EXPECT_EQ("the string can be up to 255 characters long.", match_error);
1*:   51:  EXPECT_FALSE(IsValidDescription(too_long, match_error));
1*:   52:  EXPECT_EQ("the string can be up to 255 characters long.", match_error);
1*:   53:  EXPECT_FALSE(IsValidLocation(too_long, match_error));
1*:   54:  EXPECT_EQ("the string can be up to 255 characters long.", match_error);
-:   55:
2:   56:  ::std::string invalid_char = "$";
1*:   57:  EXPECT_FALSE(IsValidName(invalid_char, match_error));
1*:   58:  EXPECT_EQ("character '$' is not allowed.", match_error);
1*:   59:  EXPECT_FALSE(IsValidContact(invalid_char, match_error));
1*:   60:  EXPECT_EQ("character '$' is not allowed.", match_error);
1*:   61:  EXPECT_FALSE(IsValidDescription(invalid_char, match_error));
1*:   62:  EXPECT_EQ("character '$' is not allowed.", match_error);
1*:   63:  EXPECT_FALSE(IsValidLocation(invalid_char, match_error));
1*:   64:  EXPECT_EQ("character '$' is not allowed.", match_error);
-:   65:
2:   66:  ::std::string invalid_chars_umlauts = "ä";
1*:   67:  EXPECT_FALSE(IsValidName(invalid_chars_umlauts, match_error));
1*:   68:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
1*:   69:  EXPECT_FALSE(IsValidContact(invalid_chars_umlauts, match_error));
1*:   70:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
1*:   71:  EXPECT_FALSE(IsValidDescription(invalid_chars_umlauts, match_error));
1*:   72:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
1*:   73:  EXPECT_FALSE(IsValidLocation(invalid_chars_umlauts, match_error));
1*:   74:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
1:   75:}
------------------
_ZN4wago15snmp_config_lib42SnmpParameterValidation_invalidValues_TestC2Ev:
function _ZN4wago15snmp_config_lib42SnmpParameterValidation_invalidValues_TestC2Ev called 1 returned 100% blocks executed 100%
1:   43:TEST(SnmpParameterValidation, invalidValues) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib42SnmpParameterValidation_invalidValues_TestD0Ev:
function _ZN4wago15snmp_config_lib42SnmpParameterValidation_invalidValues_TestD0Ev called 1 returned 100% blocks executed 100%
1:   43:TEST(SnmpParameterValidation, invalidValues) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib42SnmpParameterValidation_invalidValues_TestD2Ev:
function _ZN4wago15snmp_config_lib42SnmpParameterValidation_invalidValues_TestD2Ev called 1 returned 100% blocks executed 100%
1:   43:TEST(SnmpParameterValidation, invalidValues) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib42SnmpParameterValidation_invalidValues_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib42SnmpParameterValidation_invalidValues_Test8TestBodyEv called 1 returned 100% blocks executed 21%
1:   43:TEST(SnmpParameterValidation, invalidValues) {
1:   44:  ::std::string match_error;
call    0 returned 1
-:   45:
1:   46:  ::std::string too_long(256, 'a');
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1*:   47:  EXPECT_FALSE(IsValidName(too_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   48:  EXPECT_EQ("the string can be up to 255 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:   49:  EXPECT_FALSE(IsValidContact(too_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   50:  EXPECT_EQ("the string can be up to 255 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:   51:  EXPECT_FALSE(IsValidDescription(too_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   52:  EXPECT_EQ("the string can be up to 255 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:   53:  EXPECT_FALSE(IsValidLocation(too_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   54:  EXPECT_EQ("the string can be up to 255 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:   55:
2:   56:  ::std::string invalid_char = "$";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:   57:  EXPECT_FALSE(IsValidName(invalid_char, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   58:  EXPECT_EQ("character '$' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:   59:  EXPECT_FALSE(IsValidContact(invalid_char, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   60:  EXPECT_EQ("character '$' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:   61:  EXPECT_FALSE(IsValidDescription(invalid_char, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   62:  EXPECT_EQ("character '$' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:   63:  EXPECT_FALSE(IsValidLocation(invalid_char, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   64:  EXPECT_EQ("character '$' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:   65:
2:   66:  ::std::string invalid_chars_umlauts = "ä";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:   67:  EXPECT_FALSE(IsValidName(invalid_chars_umlauts, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   68:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:   69:  EXPECT_FALSE(IsValidContact(invalid_chars_umlauts, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   70:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:   71:  EXPECT_FALSE(IsValidDescription(invalid_chars_umlauts, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   72:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:   73:  EXPECT_FALSE(IsValidLocation(invalid_chars_umlauts, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   74:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:   75:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:   76:
4:   77:TEST(SnmpParameterValidation, validObjectID) {
1:   78:  ::std::string match_error;
-:   79:
1:   80:  ::std::string valid_value = ".1.2.333.4.5.6";
1*:   81:  EXPECT_TRUE(IsValidObjectId(valid_value, match_error));
1*:   82:  EXPECT_TRUE(match_error.empty());
-:   83:
2:   84:  ::std::string empty_value;
1*:   85:  EXPECT_TRUE(IsValidObjectId(empty_value, match_error));
1*:   86:  EXPECT_TRUE(match_error.empty());
1:   87:}
------------------
_ZN4wago15snmp_config_lib42SnmpParameterValidation_validObjectID_TestC2Ev:
function _ZN4wago15snmp_config_lib42SnmpParameterValidation_validObjectID_TestC2Ev called 1 returned 100% blocks executed 100%
1:   77:TEST(SnmpParameterValidation, validObjectID) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib42SnmpParameterValidation_validObjectID_TestD0Ev:
function _ZN4wago15snmp_config_lib42SnmpParameterValidation_validObjectID_TestD0Ev called 1 returned 100% blocks executed 100%
1:   77:TEST(SnmpParameterValidation, validObjectID) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib42SnmpParameterValidation_validObjectID_TestD2Ev:
function _ZN4wago15snmp_config_lib42SnmpParameterValidation_validObjectID_TestD2Ev called 1 returned 100% blocks executed 100%
1:   77:TEST(SnmpParameterValidation, validObjectID) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib42SnmpParameterValidation_validObjectID_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib42SnmpParameterValidation_validObjectID_Test8TestBodyEv called 1 returned 100% blocks executed 24%
1:   77:TEST(SnmpParameterValidation, validObjectID) {
1:   78:  ::std::string match_error;
call    0 returned 1
-:   79:
1:   80:  ::std::string valid_value = ".1.2.333.4.5.6";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1*:   81:  EXPECT_TRUE(IsValidObjectId(valid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   82:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
-:   83:
2:   84:  ::std::string empty_value;
call    0 returned 1
call    1 returned 1
call    2 never executed
1*:   85:  EXPECT_TRUE(IsValidObjectId(empty_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   86:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1:   87:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:   88:
4:   89:TEST(SnmpParameterValidation, invalidObjectID) {
1:   90:  ::std::string match_error;
-:   91:
1:   92:  ::std::string invalid_value = ".a.b.c";
1*:   93:  EXPECT_FALSE(IsValidObjectId(invalid_value, match_error));
1*:   94:  EXPECT_EQ("character '.' is not allowed.", match_error);
-:   95:
2:   96:  ::std::string too_long(129, '1');
1*:   97:  EXPECT_FALSE(IsValidObjectId(too_long, match_error));
1*:   98:  EXPECT_EQ("the string can be up to 128 characters long.", match_error);
-:   99:
2:  100:  ::std::string missing_dot_at_beginning("1.2.3");
1*:  101:  EXPECT_FALSE(IsValidObjectId(missing_dot_at_beginning, match_error));
1*:  102:  EXPECT_EQ("character '1' is not allowed.", match_error);
-:  103:
2:  104:  ::std::string dot_at_the_end(".1.2.3.");
1*:  105:  EXPECT_FALSE(IsValidObjectId(dot_at_the_end, match_error));
1*:  106:  EXPECT_EQ("character '.' is not allowed.", match_error);
-:  107:
2:  108:  ::std::string double_dot(".1..2");
1*:  109:  EXPECT_FALSE(IsValidObjectId(double_dot, match_error));
1*:  110:  EXPECT_EQ("character '.' is not allowed.", match_error);
1:  111:}
------------------
_ZN4wago15snmp_config_lib44SnmpParameterValidation_invalidObjectID_TestC2Ev:
function _ZN4wago15snmp_config_lib44SnmpParameterValidation_invalidObjectID_TestC2Ev called 1 returned 100% blocks executed 100%
1:   89:TEST(SnmpParameterValidation, invalidObjectID) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib44SnmpParameterValidation_invalidObjectID_TestD0Ev:
function _ZN4wago15snmp_config_lib44SnmpParameterValidation_invalidObjectID_TestD0Ev called 1 returned 100% blocks executed 100%
1:   89:TEST(SnmpParameterValidation, invalidObjectID) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib44SnmpParameterValidation_invalidObjectID_TestD2Ev:
function _ZN4wago15snmp_config_lib44SnmpParameterValidation_invalidObjectID_TestD2Ev called 1 returned 100% blocks executed 100%
1:   89:TEST(SnmpParameterValidation, invalidObjectID) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib44SnmpParameterValidation_invalidObjectID_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib44SnmpParameterValidation_invalidObjectID_Test8TestBodyEv called 1 returned 100% blocks executed 25%
1:   89:TEST(SnmpParameterValidation, invalidObjectID) {
1:   90:  ::std::string match_error;
call    0 returned 1
-:   91:
1:   92:  ::std::string invalid_value = ".a.b.c";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1*:   93:  EXPECT_FALSE(IsValidObjectId(invalid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   94:  EXPECT_EQ("character '.' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:   95:
2:   96:  ::std::string too_long(129, '1');
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:   97:  EXPECT_FALSE(IsValidObjectId(too_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:   98:  EXPECT_EQ("the string can be up to 128 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:   99:
2:  100:  ::std::string missing_dot_at_beginning("1.2.3");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  101:  EXPECT_FALSE(IsValidObjectId(missing_dot_at_beginning, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  102:  EXPECT_EQ("character '1' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  103:
2:  104:  ::std::string dot_at_the_end(".1.2.3.");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  105:  EXPECT_FALSE(IsValidObjectId(dot_at_the_end, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  106:  EXPECT_EQ("character '.' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  107:
2:  108:  ::std::string double_dot(".1..2");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  109:  EXPECT_FALSE(IsValidObjectId(double_dot, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  110:  EXPECT_EQ("character '.' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  111:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  112:
4:  113:TEST(SnmpParameterValidation, validCommunityName) {
1:  114:  ::std::string match_error;
-:  115:
1:  116:  ::std::string valid_value = "AA09!?:;:{}()[]@";
1*:  117:  EXPECT_TRUE(IsValidCommunityName(valid_value, match_error));
1*:  118:  EXPECT_TRUE(match_error.empty());
-:  119:
1:  120:}
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_validCommunityName_TestC2Ev:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_validCommunityName_TestC2Ev called 1 returned 100% blocks executed 100%
1:  113:TEST(SnmpParameterValidation, validCommunityName) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_validCommunityName_TestD0Ev:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_validCommunityName_TestD0Ev called 1 returned 100% blocks executed 100%
1:  113:TEST(SnmpParameterValidation, validCommunityName) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_validCommunityName_TestD2Ev:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_validCommunityName_TestD2Ev called 1 returned 100% blocks executed 100%
1:  113:TEST(SnmpParameterValidation, validCommunityName) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_validCommunityName_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_validCommunityName_Test8TestBodyEv called 1 returned 100% blocks executed 27%
1:  113:TEST(SnmpParameterValidation, validCommunityName) {
1:  114:  ::std::string match_error;
call    0 returned 1
-:  115:
1:  116:  ::std::string valid_value = "AA09!?:;:{}()[]@";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1*:  117:  EXPECT_TRUE(IsValidCommunityName(valid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  118:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
-:  119:
1:  120:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  121:
4:  122:TEST(SnmpParameterValidation, invalidCommunityName) {
1:  123:  ::std::string match_error;
-:  124:
1:  125:  ::std::string invalid_value = "$";
1*:  126:  EXPECT_FALSE(IsValidCommunityName(invalid_value, match_error));
1*:  127:  EXPECT_EQ("character '$' is not allowed.", match_error);
-:  128:
2:  129:  ::std::string too_long(33, '1');
1*:  130:  EXPECT_FALSE(IsValidCommunityName(too_long, match_error));
1*:  131:  EXPECT_EQ("the string must be between 1 and 32 characters long.", match_error);
-:  132:
2:  133:  ::std::string invalid_chars_umlauts = "äüö";
1*:  134:  EXPECT_FALSE(IsValidCommunityName(invalid_chars_umlauts, match_error));
1*:  135:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
-:  136:
2:  137:  ::std::string empty_value;
1*:  138:  EXPECT_FALSE(IsValidCommunityName(empty_value, match_error));
1*:  139:  EXPECT_EQ("the string must be between 1 and 32 characters long.", match_error);
1:  140:}
------------------
_ZN4wago15snmp_config_lib49SnmpParameterValidation_invalidCommunityName_TestC2Ev:
function _ZN4wago15snmp_config_lib49SnmpParameterValidation_invalidCommunityName_TestC2Ev called 1 returned 100% blocks executed 100%
1:  122:TEST(SnmpParameterValidation, invalidCommunityName) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib49SnmpParameterValidation_invalidCommunityName_TestD0Ev:
function _ZN4wago15snmp_config_lib49SnmpParameterValidation_invalidCommunityName_TestD0Ev called 1 returned 100% blocks executed 100%
1:  122:TEST(SnmpParameterValidation, invalidCommunityName) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib49SnmpParameterValidation_invalidCommunityName_TestD2Ev:
function _ZN4wago15snmp_config_lib49SnmpParameterValidation_invalidCommunityName_TestD2Ev called 1 returned 100% blocks executed 100%
1:  122:TEST(SnmpParameterValidation, invalidCommunityName) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib49SnmpParameterValidation_invalidCommunityName_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib49SnmpParameterValidation_invalidCommunityName_Test8TestBodyEv called 1 returned 100% blocks executed 24%
1:  122:TEST(SnmpParameterValidation, invalidCommunityName) {
1:  123:  ::std::string match_error;
call    0 returned 1
-:  124:
1:  125:  ::std::string invalid_value = "$";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1*:  126:  EXPECT_FALSE(IsValidCommunityName(invalid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  127:  EXPECT_EQ("character '$' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  128:
2:  129:  ::std::string too_long(33, '1');
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  130:  EXPECT_FALSE(IsValidCommunityName(too_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  131:  EXPECT_EQ("the string must be between 1 and 32 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  132:
2:  133:  ::std::string invalid_chars_umlauts = "äüö";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  134:  EXPECT_FALSE(IsValidCommunityName(invalid_chars_umlauts, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  135:  EXPECT_EQ("character 'ä' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  136:
2:  137:  ::std::string empty_value;
call    0 returned 1
call    1 returned 1
call    2 never executed
1*:  138:  EXPECT_FALSE(IsValidCommunityName(empty_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  139:  EXPECT_EQ("the string must be between 1 and 32 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  140:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  141:
4:  142:TEST(SnmpParameterValidation, duplicatedCommunityEntry) {
-:  143:
1:  144:  SnmpConfig c;
1:  145:  c.communities_.emplace_back(Community { "comm1", Access::ReadOnly }); //new entry
1:  146:  c.communities_.emplace_back(Community { "comm2", Access::ReadOnly }); //new entry
1:  147:  c.communities_.emplace_back(Community { "comm2", Access::ReadWrite }); //new entry
1*:  148:  EXPECT_TRUE(Validate(c).IsOk());
-:  149:
1:  150:  c.communities_.emplace_back(Community { "comm2", Access::ReadOnly }); //duplicated entry
1:  151:  auto s = Validate(c);
1*:  152:  EXPECT_EQ(1, s.GetStatuses().size());
2*:  153:  EXPECT_EQ("duplicated entry for community: 'comm2'", s.GetStatuses().front().ToString());
1:  154:}
------------------
_ZN4wago15snmp_config_lib53SnmpParameterValidation_duplicatedCommunityEntry_TestC2Ev:
function _ZN4wago15snmp_config_lib53SnmpParameterValidation_duplicatedCommunityEntry_TestC2Ev called 1 returned 100% blocks executed 100%
1:  142:TEST(SnmpParameterValidation, duplicatedCommunityEntry) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib53SnmpParameterValidation_duplicatedCommunityEntry_TestD0Ev:
function _ZN4wago15snmp_config_lib53SnmpParameterValidation_duplicatedCommunityEntry_TestD0Ev called 1 returned 100% blocks executed 100%
1:  142:TEST(SnmpParameterValidation, duplicatedCommunityEntry) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib53SnmpParameterValidation_duplicatedCommunityEntry_TestD2Ev:
function _ZN4wago15snmp_config_lib53SnmpParameterValidation_duplicatedCommunityEntry_TestD2Ev called 1 returned 100% blocks executed 100%
1:  142:TEST(SnmpParameterValidation, duplicatedCommunityEntry) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib53SnmpParameterValidation_duplicatedCommunityEntry_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib53SnmpParameterValidation_duplicatedCommunityEntry_Test8TestBodyEv called 1 returned 100% blocks executed 35%
1:  142:TEST(SnmpParameterValidation, duplicatedCommunityEntry) {
-:  143:
1:  144:  SnmpConfig c;
call    0 returned 1
1:  145:  c.communities_.emplace_back(Community { "comm1", Access::ReadOnly }); //new entry
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 never executed
call   14 never executed
call   15 never executed
1:  146:  c.communities_.emplace_back(Community { "comm2", Access::ReadOnly }); //new entry
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 never executed
call   14 never executed
call   15 never executed
1:  147:  c.communities_.emplace_back(Community { "comm2", Access::ReadWrite }); //new entry
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 never executed
call   14 never executed
call   15 never executed
1*:  148:  EXPECT_TRUE(Validate(c).IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 returned 1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 returned 1
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  149:
1:  150:  c.communities_.emplace_back(Community { "comm2", Access::ReadOnly }); //duplicated entry
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 never executed
call   14 never executed
call   15 never executed
1:  151:  auto s = Validate(c);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1*:  152:  EXPECT_EQ(1, s.GetStatuses().size());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 returned 1
call   23 never executed
call   24 never executed
call   25 never executed
2*:  153:  EXPECT_EQ("duplicated entry for community: 'comm2'", s.GetStatuses().front().ToString());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 returned 1
call   26 never executed
call   27 never executed
call   28 never executed
1:  154:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  155:
4:  156:TEST(SnmpParameterValidation, duplicatedTrapReceiverV1V2cEntry) {
-:  157:
1:  158:  SnmpConfig c;
1:  159:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host1", "comm1", VersionV1V2c::V2c });//new entry
1:  160:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host1", "comm1", VersionV1V2c::V1 });//new entry
1:  161:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host1", "comm2", VersionV1V2c::V1 });//new entry
1:  162:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host2", "comm2", VersionV1V2c::V1 });//new entry
1*:  163:  EXPECT_TRUE(Validate(c).IsOk());
-:  164:
1:  165:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host1", "comm1", VersionV1V2c::V1 });//duplicated entry
1:  166:  auto s = Validate(c);
1*:  167:  EXPECT_EQ(1, s.GetStatuses().size());
2*:  168:  EXPECT_EQ("duplicated entry for trap receiver: 'host1'", s.GetStatuses().front().ToString());
1:  169:}
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_duplicatedTrapReceiverV1V2cEntry_TestC2Ev:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_duplicatedTrapReceiverV1V2cEntry_TestC2Ev called 1 returned 100% blocks executed 100%
1:  156:TEST(SnmpParameterValidation, duplicatedTrapReceiverV1V2cEntry) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_duplicatedTrapReceiverV1V2cEntry_TestD0Ev:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_duplicatedTrapReceiverV1V2cEntry_TestD0Ev called 1 returned 100% blocks executed 100%
1:  156:TEST(SnmpParameterValidation, duplicatedTrapReceiverV1V2cEntry) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_duplicatedTrapReceiverV1V2cEntry_TestD2Ev:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_duplicatedTrapReceiverV1V2cEntry_TestD2Ev called 1 returned 100% blocks executed 100%
1:  156:TEST(SnmpParameterValidation, duplicatedTrapReceiverV1V2cEntry) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_duplicatedTrapReceiverV1V2cEntry_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_duplicatedTrapReceiverV1V2cEntry_Test8TestBodyEv called 1 returned 100% blocks executed 37%
1:  156:TEST(SnmpParameterValidation, duplicatedTrapReceiverV1V2cEntry) {
-:  157:
1:  158:  SnmpConfig c;
call    0 returned 1
1:  159:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host1", "comm1", VersionV1V2c::V2c });//new entry
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
1:  160:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host1", "comm1", VersionV1V2c::V1 });//new entry
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
1:  161:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host1", "comm2", VersionV1V2c::V1 });//new entry
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
1:  162:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host2", "comm2", VersionV1V2c::V1 });//new entry
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
1*:  163:  EXPECT_TRUE(Validate(c).IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 returned 1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 returned 1
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  164:
1:  165:  c.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "host1", "comm1", VersionV1V2c::V1 });//duplicated entry
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
1:  166:  auto s = Validate(c);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1*:  167:  EXPECT_EQ(1, s.GetStatuses().size());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 returned 1
call   23 never executed
call   24 never executed
call   25 never executed
2*:  168:  EXPECT_EQ("duplicated entry for trap receiver: 'host1'", s.GetStatuses().front().ToString());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 returned 1
call   26 never executed
call   27 never executed
call   28 never executed
1:  169:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  170:
4:  171:TEST(SnmpParameterValidation, duplicatedTrapReceiverV3Name) {
-:  172:
1:  173:  SnmpConfig c;
1:  174:  c.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name", SecurityLevel::NoAuthNoPriv,
-:  175:    AuthenticationType::None, "", Privacy::None, "", "192.168.1.1" });      //new entry
1:  176:  c.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name1", SecurityLevel::NoAuthNoPriv,
-:  177:    AuthenticationType::None, "", Privacy::None, "", "192.168.1.1" });      //new entry
1*:  178:  EXPECT_TRUE(Validate(c).IsOk());
-:  179:
1:  180:  c.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name", SecurityLevel::AuthPriv,
-:  181:    AuthenticationType::MD5, "12345678", Privacy::DES, "12345678", "192.168.1.1" }); //duplicated entry
-:  182:
1:  183:  auto s = Validate(c);
-:  184:
1*:  185:  EXPECT_EQ(1, s.GetStatuses().size());
2*:  186:  EXPECT_EQ("duplicated trap receiver name: 'name'", s.GetStatuses().front().ToString());
1:  187:}
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_duplicatedTrapReceiverV3Name_TestC2Ev:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_duplicatedTrapReceiverV3Name_TestC2Ev called 1 returned 100% blocks executed 100%
1:  171:TEST(SnmpParameterValidation, duplicatedTrapReceiverV3Name) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_duplicatedTrapReceiverV3Name_TestD0Ev:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_duplicatedTrapReceiverV3Name_TestD0Ev called 1 returned 100% blocks executed 100%
1:  171:TEST(SnmpParameterValidation, duplicatedTrapReceiverV3Name) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_duplicatedTrapReceiverV3Name_TestD2Ev:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_duplicatedTrapReceiverV3Name_TestD2Ev called 1 returned 100% blocks executed 100%
1:  171:TEST(SnmpParameterValidation, duplicatedTrapReceiverV3Name) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_duplicatedTrapReceiverV3Name_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_duplicatedTrapReceiverV3Name_Test8TestBodyEv called 1 returned 100% blocks executed 36%
1:  171:TEST(SnmpParameterValidation, duplicatedTrapReceiverV3Name) {
-:  172:
1:  173:  SnmpConfig c;
call    0 returned 1
1:  174:  c.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name", SecurityLevel::NoAuthNoPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
-:  175:    AuthenticationType::None, "", Privacy::None, "", "192.168.1.1" });      //new entry
1:  176:  c.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name1", SecurityLevel::NoAuthNoPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
-:  177:    AuthenticationType::None, "", Privacy::None, "", "192.168.1.1" });      //new entry
1*:  178:  EXPECT_TRUE(Validate(c).IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 returned 1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 returned 1
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  179:
1:  180:  c.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name", SecurityLevel::AuthPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
-:  181:    AuthenticationType::MD5, "12345678", Privacy::DES, "12345678", "192.168.1.1" }); //duplicated entry
-:  182:
1:  183:  auto s = Validate(c);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
-:  184:
1*:  185:  EXPECT_EQ(1, s.GetStatuses().size());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 returned 1
call   23 never executed
call   24 never executed
call   25 never executed
2*:  186:  EXPECT_EQ("duplicated trap receiver name: 'name'", s.GetStatuses().front().ToString());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 returned 1
call   26 never executed
call   27 never executed
call   28 never executed
1:  187:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  188:
4:  189:TEST(SnmpParameterValidation, duplicatedUserName) {
-:  190:
1:  191:  SnmpConfig c;
1:  192:  c.user_.emplace_back(User { "name", Access::ReadWrite, SecurityLevel::NoAuthNoPriv,
-:  193:    AuthenticationType::None, "", Privacy::None, "" });      //new entry
1:  194:  c.user_.emplace_back(User { "name2", Access::ReadWrite, SecurityLevel::NoAuthNoPriv,
-:  195:    AuthenticationType::None, "", Privacy::None, "" });      //new entry
1*:  196:  EXPECT_TRUE(Validate(c).IsOk());
-:  197:
1:  198:  c.user_.emplace_back(User { "name", Access::ReadWrite, SecurityLevel::AuthPriv,
-:  199:    AuthenticationType::MD5, "12345678", Privacy::DES, "12345678" });   //duplicated entry
-:  200:
1:  201:  auto s = Validate(c);
-:  202:
2*:  203:  EXPECT_EQ("duplicated user name: 'name'", s.GetStatuses().front().ToString());
1:  204:}
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_duplicatedUserName_TestC2Ev:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_duplicatedUserName_TestC2Ev called 1 returned 100% blocks executed 100%
1:  189:TEST(SnmpParameterValidation, duplicatedUserName) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_duplicatedUserName_TestD0Ev:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_duplicatedUserName_TestD0Ev called 1 returned 100% blocks executed 100%
1:  189:TEST(SnmpParameterValidation, duplicatedUserName) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_duplicatedUserName_TestD2Ev:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_duplicatedUserName_TestD2Ev called 1 returned 100% blocks executed 100%
1:  189:TEST(SnmpParameterValidation, duplicatedUserName) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_duplicatedUserName_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_duplicatedUserName_Test8TestBodyEv called 1 returned 100% blocks executed 38%
1:  189:TEST(SnmpParameterValidation, duplicatedUserName) {
-:  190:
1:  191:  SnmpConfig c;
call    0 returned 1
1:  192:  c.user_.emplace_back(User { "name", Access::ReadWrite, SecurityLevel::NoAuthNoPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  193:    AuthenticationType::None, "", Privacy::None, "" });      //new entry
1:  194:  c.user_.emplace_back(User { "name2", Access::ReadWrite, SecurityLevel::NoAuthNoPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  195:    AuthenticationType::None, "", Privacy::None, "" });      //new entry
1*:  196:  EXPECT_TRUE(Validate(c).IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 returned 1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 returned 1
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  197:
1:  198:  c.user_.emplace_back(User { "name", Access::ReadWrite, SecurityLevel::AuthPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  199:    AuthenticationType::MD5, "12345678", Privacy::DES, "12345678" });   //duplicated entry
-:  200:
1:  201:  auto s = Validate(c);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
-:  202:
2*:  203:  EXPECT_EQ("duplicated user name: 'name'", s.GetStatuses().front().ToString());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 returned 1
call   26 never executed
call   27 never executed
call   28 never executed
1:  204:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  205:
4:  206:TEST(SnmpParameterValidation, validHost) {
1:  207:  ::std::string match_error;
-:  208:
1:  209:  ::std::string valid_value = "aB-.";
1*:  210:  EXPECT_TRUE(IsValidHost(valid_value, match_error));
1*:  211:  EXPECT_TRUE(match_error.empty());
1:  212:}
------------------
_ZN4wago15snmp_config_lib38SnmpParameterValidation_validHost_TestC2Ev:
function _ZN4wago15snmp_config_lib38SnmpParameterValidation_validHost_TestC2Ev called 1 returned 100% blocks executed 100%
1:  206:TEST(SnmpParameterValidation, validHost) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib38SnmpParameterValidation_validHost_TestD0Ev:
function _ZN4wago15snmp_config_lib38SnmpParameterValidation_validHost_TestD0Ev called 1 returned 100% blocks executed 100%
1:  206:TEST(SnmpParameterValidation, validHost) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib38SnmpParameterValidation_validHost_TestD2Ev:
function _ZN4wago15snmp_config_lib38SnmpParameterValidation_validHost_TestD2Ev called 1 returned 100% blocks executed 100%
1:  206:TEST(SnmpParameterValidation, validHost) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib38SnmpParameterValidation_validHost_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib38SnmpParameterValidation_validHost_Test8TestBodyEv called 1 returned 100% blocks executed 27%
1:  206:TEST(SnmpParameterValidation, validHost) {
1:  207:  ::std::string match_error;
call    0 returned 1
-:  208:
1:  209:  ::std::string valid_value = "aB-.";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1*:  210:  EXPECT_TRUE(IsValidHost(valid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  211:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1:  212:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  213:
4:  214:TEST(SnmpParameterValidation, invalidHost) {
1:  215:  ::std::string match_error;
-:  216:
1:  217:  ::std::string invalid_value = "()";
1*:  218:  EXPECT_FALSE(IsValidHost(invalid_value, match_error));
1*:  219:  EXPECT_EQ("character '(' is not allowed.", match_error);
-:  220:
2:  221:  ::std::string too_long(256, '1');
1*:  222:  EXPECT_FALSE(IsValidHost(too_long, match_error));
1*:  223:  EXPECT_EQ("the string must be between 1 and 255 characters long.", match_error);
-:  224:
2:  225:  ::std::string empty_value;
1*:  226:  EXPECT_FALSE(IsValidHost(empty_value, match_error));
1*:  227:  EXPECT_EQ("the string must be between 1 and 255 characters long.", match_error);
-:  228:
2:  229:  ::std::string invalid_chars_umlauts = "abüö";
1*:  230:  EXPECT_FALSE(IsValidHost(invalid_chars_umlauts, match_error));
1*:  231:  EXPECT_EQ("character 'ü' is not allowed.", match_error);
-:  232:
1:  233:}
------------------
_ZN4wago15snmp_config_lib40SnmpParameterValidation_invalidHost_TestC2Ev:
function _ZN4wago15snmp_config_lib40SnmpParameterValidation_invalidHost_TestC2Ev called 1 returned 100% blocks executed 100%
1:  214:TEST(SnmpParameterValidation, invalidHost) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib40SnmpParameterValidation_invalidHost_TestD0Ev:
function _ZN4wago15snmp_config_lib40SnmpParameterValidation_invalidHost_TestD0Ev called 1 returned 100% blocks executed 100%
1:  214:TEST(SnmpParameterValidation, invalidHost) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib40SnmpParameterValidation_invalidHost_TestD2Ev:
function _ZN4wago15snmp_config_lib40SnmpParameterValidation_invalidHost_TestD2Ev called 1 returned 100% blocks executed 100%
1:  214:TEST(SnmpParameterValidation, invalidHost) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib40SnmpParameterValidation_invalidHost_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib40SnmpParameterValidation_invalidHost_Test8TestBodyEv called 1 returned 100% blocks executed 24%
1:  214:TEST(SnmpParameterValidation, invalidHost) {
1:  215:  ::std::string match_error;
call    0 returned 1
-:  216:
1:  217:  ::std::string invalid_value = "()";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1*:  218:  EXPECT_FALSE(IsValidHost(invalid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  219:  EXPECT_EQ("character '(' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  220:
2:  221:  ::std::string too_long(256, '1');
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  222:  EXPECT_FALSE(IsValidHost(too_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  223:  EXPECT_EQ("the string must be between 1 and 255 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  224:
2:  225:  ::std::string empty_value;
call    0 returned 1
call    1 returned 1
call    2 never executed
1*:  226:  EXPECT_FALSE(IsValidHost(empty_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  227:  EXPECT_EQ("the string must be between 1 and 255 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  228:
2:  229:  ::std::string invalid_chars_umlauts = "abüö";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  230:  EXPECT_FALSE(IsValidHost(invalid_chars_umlauts, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  231:  EXPECT_EQ("character 'ü' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  232:
1:  233:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  234:
4:  235:TEST(SnmpParameterValidation, validUserAuthenticationPrivacyKey) {
1:  236:  ::std::string match_error;
-:  237:
1:  238:  ::std::string short_value(8, 'A');
1*:  239:  EXPECT_TRUE(IsValidUserName(short_value, match_error));
1*:  240:  EXPECT_TRUE(IsValidAuthenticationKey(short_value, match_error));
1*:  241:  EXPECT_TRUE(IsValidPrivacyKey(short_value, match_error));
-:  242:
2:  243:  ::std::string long_value(32, 'A');
1*:  244:  EXPECT_TRUE(IsValidUserName(long_value, match_error));
1*:  245:  EXPECT_TRUE(IsValidAuthenticationKey(long_value, match_error));
1*:  246:  EXPECT_TRUE(IsValidPrivacyKey(long_value, match_error));
-:  247:
2:  248:  ::std::string valid_values("aB09!()*~'._-");
1*:  249:  EXPECT_TRUE(IsValidUserName(valid_values, match_error));
1*:  250:  EXPECT_TRUE(IsValidAuthenticationKey(valid_values, match_error));
1*:  251:  EXPECT_TRUE(IsValidPrivacyKey(valid_values, match_error));
-:  252:
2:  253:  ::std::string valid_empty_value;
1*:  254:  EXPECT_TRUE(IsValidPrivacyKey(valid_empty_value, match_error));
1*:  255:  EXPECT_TRUE(match_error.empty());
1:  256:}
------------------
_ZN4wago15snmp_config_lib62SnmpParameterValidation_validUserAuthenticationPrivacyKey_TestC2Ev:
function _ZN4wago15snmp_config_lib62SnmpParameterValidation_validUserAuthenticationPrivacyKey_TestC2Ev called 1 returned 100% blocks executed 100%
1:  235:TEST(SnmpParameterValidation, validUserAuthenticationPrivacyKey) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib62SnmpParameterValidation_validUserAuthenticationPrivacyKey_TestD0Ev:
function _ZN4wago15snmp_config_lib62SnmpParameterValidation_validUserAuthenticationPrivacyKey_TestD0Ev called 1 returned 100% blocks executed 100%
1:  235:TEST(SnmpParameterValidation, validUserAuthenticationPrivacyKey) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib62SnmpParameterValidation_validUserAuthenticationPrivacyKey_TestD2Ev:
function _ZN4wago15snmp_config_lib62SnmpParameterValidation_validUserAuthenticationPrivacyKey_TestD2Ev called 1 returned 100% blocks executed 100%
1:  235:TEST(SnmpParameterValidation, validUserAuthenticationPrivacyKey) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib62SnmpParameterValidation_validUserAuthenticationPrivacyKey_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib62SnmpParameterValidation_validUserAuthenticationPrivacyKey_Test8TestBodyEv called 1 returned 100% blocks executed 23%
1:  235:TEST(SnmpParameterValidation, validUserAuthenticationPrivacyKey) {
1:  236:  ::std::string match_error;
call    0 returned 1
-:  237:
1:  238:  ::std::string short_value(8, 'A');
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1*:  239:  EXPECT_TRUE(IsValidUserName(short_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  240:  EXPECT_TRUE(IsValidAuthenticationKey(short_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  241:  EXPECT_TRUE(IsValidPrivacyKey(short_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
-:  242:
2:  243:  ::std::string long_value(32, 'A');
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  244:  EXPECT_TRUE(IsValidUserName(long_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  245:  EXPECT_TRUE(IsValidAuthenticationKey(long_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  246:  EXPECT_TRUE(IsValidPrivacyKey(long_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
-:  247:
2:  248:  ::std::string valid_values("aB09!()*~'._-");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  249:  EXPECT_TRUE(IsValidUserName(valid_values, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  250:  EXPECT_TRUE(IsValidAuthenticationKey(valid_values, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  251:  EXPECT_TRUE(IsValidPrivacyKey(valid_values, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
-:  252:
2:  253:  ::std::string valid_empty_value;
call    0 returned 1
call    1 returned 1
call    2 never executed
1*:  254:  EXPECT_TRUE(IsValidPrivacyKey(valid_empty_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  255:  EXPECT_TRUE(match_error.empty());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 1
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
1:  256:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  257:
4:  258:TEST(SnmpParameterValidation, invalidUserAuthenticationPrivacyKey) {
1:  259:  ::std::string match_error;
-:  260:
1:  261:  ::std::string to_short(7, 'b');
1*:  262:  EXPECT_FALSE(IsValidUserName(to_short, match_error));
1*:  263:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
1*:  264:  EXPECT_FALSE(IsValidAuthenticationKey(to_short, match_error));
1*:  265:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
1*:  266:  EXPECT_FALSE(IsValidPrivacyKey(to_short, match_error));
1*:  267:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
-:  268:
2:  269:  ::std::string to_long(33, 'b');
1*:  270:  EXPECT_FALSE(IsValidUserName(to_long, match_error));
1*:  271:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
1*:  272:  EXPECT_FALSE(IsValidAuthenticationKey(to_long, match_error));
1*:  273:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
1*:  274:  EXPECT_FALSE(IsValidPrivacyKey(to_long, match_error));
1*:  275:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
-:  276:
2:  277:  ::std::string invalid_value = "aaaaaaaa[]";
1*:  278:  EXPECT_FALSE(IsValidUserName(invalid_value, match_error));
1*:  279:  EXPECT_EQ("character '[' is not allowed.", match_error);
1*:  280:  EXPECT_FALSE(IsValidAuthenticationKey(invalid_value, match_error));
1*:  281:  EXPECT_EQ("character '[' is not allowed.", match_error);
1*:  282:  EXPECT_FALSE(IsValidPrivacyKey(invalid_value, match_error));
1*:  283:  EXPECT_EQ("character '[' is not allowed.", match_error);
-:  284:
2:  285:  ::std::string invalid_chars_umlauts = "HalloMöve";
1*:  286:  EXPECT_FALSE(IsValidUserName(invalid_chars_umlauts, match_error));
1*:  287:  EXPECT_EQ("character 'ö' is not allowed.", match_error);
1*:  288:  EXPECT_FALSE(IsValidAuthenticationKey(invalid_chars_umlauts, match_error));
1*:  289:  EXPECT_EQ("character 'ö' is not allowed.", match_error);
1*:  290:  EXPECT_FALSE(IsValidPrivacyKey(invalid_chars_umlauts, match_error));
1*:  291:  EXPECT_EQ("character 'ö' is not allowed.", match_error);
1:  292:}
------------------
_ZN4wago15snmp_config_lib64SnmpParameterValidation_invalidUserAuthenticationPrivacyKey_TestC2Ev:
function _ZN4wago15snmp_config_lib64SnmpParameterValidation_invalidUserAuthenticationPrivacyKey_TestC2Ev called 1 returned 100% blocks executed 100%
1:  258:TEST(SnmpParameterValidation, invalidUserAuthenticationPrivacyKey) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib64SnmpParameterValidation_invalidUserAuthenticationPrivacyKey_TestD0Ev:
function _ZN4wago15snmp_config_lib64SnmpParameterValidation_invalidUserAuthenticationPrivacyKey_TestD0Ev called 1 returned 100% blocks executed 100%
1:  258:TEST(SnmpParameterValidation, invalidUserAuthenticationPrivacyKey) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib64SnmpParameterValidation_invalidUserAuthenticationPrivacyKey_TestD2Ev:
function _ZN4wago15snmp_config_lib64SnmpParameterValidation_invalidUserAuthenticationPrivacyKey_TestD2Ev called 1 returned 100% blocks executed 100%
1:  258:TEST(SnmpParameterValidation, invalidUserAuthenticationPrivacyKey) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib64SnmpParameterValidation_invalidUserAuthenticationPrivacyKey_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib64SnmpParameterValidation_invalidUserAuthenticationPrivacyKey_Test8TestBodyEv called 1 returned 100% blocks executed 22%
1:  258:TEST(SnmpParameterValidation, invalidUserAuthenticationPrivacyKey) {
1:  259:  ::std::string match_error;
call    0 returned 1
-:  260:
1:  261:  ::std::string to_short(7, 'b');
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1*:  262:  EXPECT_FALSE(IsValidUserName(to_short, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  263:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:  264:  EXPECT_FALSE(IsValidAuthenticationKey(to_short, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  265:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:  266:  EXPECT_FALSE(IsValidPrivacyKey(to_short, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  267:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  268:
2:  269:  ::std::string to_long(33, 'b');
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  270:  EXPECT_FALSE(IsValidUserName(to_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  271:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:  272:  EXPECT_FALSE(IsValidAuthenticationKey(to_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  273:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:  274:  EXPECT_FALSE(IsValidPrivacyKey(to_long, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  275:  EXPECT_EQ("the string must be between 8 and 32 characters long.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  276:
2:  277:  ::std::string invalid_value = "aaaaaaaa[]";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  278:  EXPECT_FALSE(IsValidUserName(invalid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  279:  EXPECT_EQ("character '[' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:  280:  EXPECT_FALSE(IsValidAuthenticationKey(invalid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  281:  EXPECT_EQ("character '[' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:  282:  EXPECT_FALSE(IsValidPrivacyKey(invalid_value, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  283:  EXPECT_EQ("character '[' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
-:  284:
2:  285:  ::std::string invalid_chars_umlauts = "HalloMöve";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
1*:  286:  EXPECT_FALSE(IsValidUserName(invalid_chars_umlauts, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  287:  EXPECT_EQ("character 'ö' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:  288:  EXPECT_FALSE(IsValidAuthenticationKey(invalid_chars_umlauts, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  289:  EXPECT_EQ("character 'ö' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1*:  290:  EXPECT_FALSE(IsValidPrivacyKey(invalid_chars_umlauts, match_error));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  291:  EXPECT_EQ("character 'ö' is not allowed.", match_error);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  292:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  293:
4:  294:TEST(SnmpParameterValidation, validateSnmpConfig) {
-:  295:
1:  296:  SnmpConfig config;
1:  297:  config.sys_name_ = "$";  //invalid
1:  298:  config.sys_location_ = "b";  //valid
1:  299:  config.sys_objectID_ = "0";  //invalid
1:  300:  config.communities_.emplace_back(Community { "$", Access::ReadOnly });  //invalid
1:  301:  config.communities_.emplace_back(Community { "a", Access::ReadOnly });  //valid
1:  302:  config.communities_.emplace_back(Community { "$$", Access::ReadWrite });  //invalid
1:  303:  config.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "$", "a", VersionV1V2c::V1 });  //invalid
1:  304:  config.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "b", "$$", VersionV1V2c::V2c });  //invalid
1:  305:  config.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "c", "d", VersionV1V2c::V2c });  //valid
-:  306:
1:  307:  auto result = Validate(config);
-:  308:
1*:  309:  EXPECT_FALSE(result.IsOk());
1*:  310:  EXPECT_EQ(6, result.GetStatuses().size());
1:  311:}
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_validateSnmpConfig_TestC2Ev:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_validateSnmpConfig_TestC2Ev called 1 returned 100% blocks executed 100%
1:  294:TEST(SnmpParameterValidation, validateSnmpConfig) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_validateSnmpConfig_TestD0Ev:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_validateSnmpConfig_TestD0Ev called 1 returned 100% blocks executed 100%
1:  294:TEST(SnmpParameterValidation, validateSnmpConfig) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_validateSnmpConfig_TestD2Ev:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_validateSnmpConfig_TestD2Ev called 1 returned 100% blocks executed 100%
1:  294:TEST(SnmpParameterValidation, validateSnmpConfig) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib47SnmpParameterValidation_validateSnmpConfig_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib47SnmpParameterValidation_validateSnmpConfig_Test8TestBodyEv called 1 returned 100% blocks executed 39%
1:  294:TEST(SnmpParameterValidation, validateSnmpConfig) {
-:  295:
1:  296:  SnmpConfig config;
call    0 returned 1
1:  297:  config.sys_name_ = "$";  //invalid
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  298:  config.sys_location_ = "b";  //valid
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  299:  config.sys_objectID_ = "0";  //invalid
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  300:  config.communities_.emplace_back(Community { "$", Access::ReadOnly });  //invalid
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 never executed
call   14 never executed
call   15 never executed
1:  301:  config.communities_.emplace_back(Community { "a", Access::ReadOnly });  //valid
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 never executed
call   14 never executed
call   15 never executed
1:  302:  config.communities_.emplace_back(Community { "$$", Access::ReadWrite });  //invalid
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 never executed
call   14 never executed
call   15 never executed
1:  303:  config.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "$", "a", VersionV1V2c::V1 });  //invalid
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
1:  304:  config.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "b", "$$", VersionV1V2c::V2c });  //invalid
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
1:  305:  config.trap_receivers_V1V2c_.emplace_back(TrapReceiverV1V2c { "c", "d", VersionV1V2c::V2c });  //valid
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
-:  306:
1:  307:  auto result = Validate(config);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
-:  308:
1*:  309:  EXPECT_FALSE(result.IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1*:  310:  EXPECT_EQ(6, result.GetStatuses().size());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 returned 1
call   23 never executed
call   24 never executed
call   25 never executed
1:  311:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  312:
4:  313:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthPriv) {
1:  314:  SnmpConfig config;
1:  315:  config.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name1234", SecurityLevel::AuthPriv,
-:  316:      AuthenticationType::MD5, "aaaaaaaa", Privacy::AES, "bbbbbbbb", "192.168.1.1" });
1:  317:  auto result = Validate(config);
1*:  318:  EXPECT_TRUE(result.IsOk());
1:  319:}
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_validateTrapV3ConfigAuthPriv_TestC2Ev:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_validateTrapV3ConfigAuthPriv_TestC2Ev called 1 returned 100% blocks executed 100%
1:  313:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_validateTrapV3ConfigAuthPriv_TestD0Ev:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_validateTrapV3ConfigAuthPriv_TestD0Ev called 1 returned 100% blocks executed 100%
1:  313:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthPriv) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_validateTrapV3ConfigAuthPriv_TestD2Ev:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_validateTrapV3ConfigAuthPriv_TestD2Ev called 1 returned 100% blocks executed 100%
1:  313:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_validateTrapV3ConfigAuthPriv_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_validateTrapV3ConfigAuthPriv_Test8TestBodyEv called 1 returned 100% blocks executed 37%
1:  313:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthPriv) {
1:  314:  SnmpConfig config;
call    0 returned 1
1:  315:  config.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name1234", SecurityLevel::AuthPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
-:  316:      AuthenticationType::MD5, "aaaaaaaa", Privacy::AES, "bbbbbbbb", "192.168.1.1" });
1:  317:  auto result = Validate(config);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1*:  318:  EXPECT_TRUE(result.IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1:  319:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  320:
4:  321:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthNoPriv) {
1:  322:  SnmpConfig config;
1:  323:  config.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name1234", SecurityLevel::AuthNoPriv,
-:  324:      AuthenticationType::MD5, "aaaaaaaa", Privacy::None, "", "192.168.1.1" });
1:  325:  auto result = Validate(config);
1*:  326:  EXPECT_TRUE(result.IsOk());
1:  327:}
------------------
_ZN4wago15snmp_config_lib59SnmpParameterValidation_validateTrapV3ConfigAuthNoPriv_TestC2Ev:
function _ZN4wago15snmp_config_lib59SnmpParameterValidation_validateTrapV3ConfigAuthNoPriv_TestC2Ev called 1 returned 100% blocks executed 100%
1:  321:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthNoPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib59SnmpParameterValidation_validateTrapV3ConfigAuthNoPriv_TestD0Ev:
function _ZN4wago15snmp_config_lib59SnmpParameterValidation_validateTrapV3ConfigAuthNoPriv_TestD0Ev called 1 returned 100% blocks executed 100%
1:  321:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthNoPriv) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib59SnmpParameterValidation_validateTrapV3ConfigAuthNoPriv_TestD2Ev:
function _ZN4wago15snmp_config_lib59SnmpParameterValidation_validateTrapV3ConfigAuthNoPriv_TestD2Ev called 1 returned 100% blocks executed 100%
1:  321:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthNoPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib59SnmpParameterValidation_validateTrapV3ConfigAuthNoPriv_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib59SnmpParameterValidation_validateTrapV3ConfigAuthNoPriv_Test8TestBodyEv called 1 returned 100% blocks executed 37%
1:  321:TEST(SnmpParameterValidation, validateTrapV3ConfigAuthNoPriv) {
1:  322:  SnmpConfig config;
call    0 returned 1
1:  323:  config.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name1234", SecurityLevel::AuthNoPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
-:  324:      AuthenticationType::MD5, "aaaaaaaa", Privacy::None, "", "192.168.1.1" });
1:  325:  auto result = Validate(config);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1*:  326:  EXPECT_TRUE(result.IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1:  327:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  328:
4:  329:TEST(SnmpParameterValidation, validateTrapV3ConfigNoAuthNoPriv) {
1:  330:  SnmpConfig config;
1:  331:  config.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name1234", SecurityLevel::NoAuthNoPriv,
-:  332:      AuthenticationType::None, "", Privacy::None, "", "192.168.1.1" });
1:  333:  auto result = Validate(config);
1*:  334:  EXPECT_TRUE(result.IsOk());
1:  335:}
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_validateTrapV3ConfigNoAuthNoPriv_TestC2Ev:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_validateTrapV3ConfigNoAuthNoPriv_TestC2Ev called 1 returned 100% blocks executed 100%
1:  329:TEST(SnmpParameterValidation, validateTrapV3ConfigNoAuthNoPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_validateTrapV3ConfigNoAuthNoPriv_TestD0Ev:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_validateTrapV3ConfigNoAuthNoPriv_TestD0Ev called 1 returned 100% blocks executed 100%
1:  329:TEST(SnmpParameterValidation, validateTrapV3ConfigNoAuthNoPriv) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_validateTrapV3ConfigNoAuthNoPriv_TestD2Ev:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_validateTrapV3ConfigNoAuthNoPriv_TestD2Ev called 1 returned 100% blocks executed 100%
1:  329:TEST(SnmpParameterValidation, validateTrapV3ConfigNoAuthNoPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_validateTrapV3ConfigNoAuthNoPriv_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_validateTrapV3ConfigNoAuthNoPriv_Test8TestBodyEv called 1 returned 100% blocks executed 37%
1:  329:TEST(SnmpParameterValidation, validateTrapV3ConfigNoAuthNoPriv) {
1:  330:  SnmpConfig config;
call    0 returned 1
1:  331:  config.trap_receivers_V3_.emplace_back(TrapReceiverV3 { "name1234", SecurityLevel::NoAuthNoPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
-:  332:      AuthenticationType::None, "", Privacy::None, "", "192.168.1.1" });
1:  333:  auto result = Validate(config);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1*:  334:  EXPECT_TRUE(result.IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1:  335:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  336:
4:  337:TEST(SnmpParameterValidation, validateUserV3ConfigAuthPriv) {
1:  338:  SnmpConfig config;
1:  339:  config.user_.emplace_back(User { "name1234", Access::ReadWrite, SecurityLevel::AuthPriv, AuthenticationType::MD5,
-:  340:      "aaaaaaaa", Privacy::AES, "bbbbbbbb" });
1:  341:  auto result = Validate(config);
1*:  342:  EXPECT_TRUE(result.IsOk());
1:  343:}
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_validateUserV3ConfigAuthPriv_TestC2Ev:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_validateUserV3ConfigAuthPriv_TestC2Ev called 1 returned 100% blocks executed 100%
1:  337:TEST(SnmpParameterValidation, validateUserV3ConfigAuthPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_validateUserV3ConfigAuthPriv_TestD0Ev:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_validateUserV3ConfigAuthPriv_TestD0Ev called 1 returned 100% blocks executed 100%
1:  337:TEST(SnmpParameterValidation, validateUserV3ConfigAuthPriv) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_validateUserV3ConfigAuthPriv_TestD2Ev:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_validateUserV3ConfigAuthPriv_TestD2Ev called 1 returned 100% blocks executed 100%
1:  337:TEST(SnmpParameterValidation, validateUserV3ConfigAuthPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib57SnmpParameterValidation_validateUserV3ConfigAuthPriv_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib57SnmpParameterValidation_validateUserV3ConfigAuthPriv_Test8TestBodyEv called 1 returned 100% blocks executed 36%
1:  337:TEST(SnmpParameterValidation, validateUserV3ConfigAuthPriv) {
1:  338:  SnmpConfig config;
call    0 returned 1
1:  339:  config.user_.emplace_back(User { "name1234", Access::ReadWrite, SecurityLevel::AuthPriv, AuthenticationType::MD5,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  340:      "aaaaaaaa", Privacy::AES, "bbbbbbbb" });
1:  341:  auto result = Validate(config);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1*:  342:  EXPECT_TRUE(result.IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1:  343:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  344:
4:  345:TEST(SnmpParameterValidation, validateUserV3ConfigAuthNoPriv) {
1:  346:  SnmpConfig config;
1:  347:  config.user_.emplace_back(User { "name1234", Access::ReadWrite, SecurityLevel::AuthNoPriv, AuthenticationType::MD5,
-:  348:      "aaaaaaaa", Privacy::None, "" });
1:  349:  auto result = Validate(config);
1*:  350:  EXPECT_TRUE(result.IsOk());
1:  351:}
------------------
_ZN4wago15snmp_config_lib59SnmpParameterValidation_validateUserV3ConfigAuthNoPriv_TestC2Ev:
function _ZN4wago15snmp_config_lib59SnmpParameterValidation_validateUserV3ConfigAuthNoPriv_TestC2Ev called 1 returned 100% blocks executed 100%
1:  345:TEST(SnmpParameterValidation, validateUserV3ConfigAuthNoPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib59SnmpParameterValidation_validateUserV3ConfigAuthNoPriv_TestD0Ev:
function _ZN4wago15snmp_config_lib59SnmpParameterValidation_validateUserV3ConfigAuthNoPriv_TestD0Ev called 1 returned 100% blocks executed 100%
1:  345:TEST(SnmpParameterValidation, validateUserV3ConfigAuthNoPriv) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib59SnmpParameterValidation_validateUserV3ConfigAuthNoPriv_TestD2Ev:
function _ZN4wago15snmp_config_lib59SnmpParameterValidation_validateUserV3ConfigAuthNoPriv_TestD2Ev called 1 returned 100% blocks executed 100%
1:  345:TEST(SnmpParameterValidation, validateUserV3ConfigAuthNoPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib59SnmpParameterValidation_validateUserV3ConfigAuthNoPriv_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib59SnmpParameterValidation_validateUserV3ConfigAuthNoPriv_Test8TestBodyEv called 1 returned 100% blocks executed 36%
1:  345:TEST(SnmpParameterValidation, validateUserV3ConfigAuthNoPriv) {
1:  346:  SnmpConfig config;
call    0 returned 1
1:  347:  config.user_.emplace_back(User { "name1234", Access::ReadWrite, SecurityLevel::AuthNoPriv, AuthenticationType::MD5,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  348:      "aaaaaaaa", Privacy::None, "" });
1:  349:  auto result = Validate(config);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1*:  350:  EXPECT_TRUE(result.IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1:  351:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  352:
4:  353:TEST(SnmpParameterValidation, validateUserV3ConfigNoAuthNoPriv) {
1:  354:  SnmpConfig config;
1:  355:  config.user_.emplace_back(User { "name1234", Access::ReadWrite, SecurityLevel::NoAuthNoPriv,
-:  356:      AuthenticationType::None, "", Privacy::None, "" });
1:  357:  auto result = Validate(config);
1*:  358:  EXPECT_TRUE(result.IsOk());
1:  359:}
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_validateUserV3ConfigNoAuthNoPriv_TestC2Ev:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_validateUserV3ConfigNoAuthNoPriv_TestC2Ev called 1 returned 100% blocks executed 100%
1:  353:TEST(SnmpParameterValidation, validateUserV3ConfigNoAuthNoPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_validateUserV3ConfigNoAuthNoPriv_TestD0Ev:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_validateUserV3ConfigNoAuthNoPriv_TestD0Ev called 1 returned 100% blocks executed 100%
1:  353:TEST(SnmpParameterValidation, validateUserV3ConfigNoAuthNoPriv) {
call    0 returned 1
call    1 returned 1
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_validateUserV3ConfigNoAuthNoPriv_TestD2Ev:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_validateUserV3ConfigNoAuthNoPriv_TestD2Ev called 1 returned 100% blocks executed 100%
1:  353:TEST(SnmpParameterValidation, validateUserV3ConfigNoAuthNoPriv) {
call    0 returned 1
------------------
_ZN4wago15snmp_config_lib61SnmpParameterValidation_validateUserV3ConfigNoAuthNoPriv_Test8TestBodyEv:
function _ZN4wago15snmp_config_lib61SnmpParameterValidation_validateUserV3ConfigNoAuthNoPriv_Test8TestBodyEv called 1 returned 100% blocks executed 36%
1:  353:TEST(SnmpParameterValidation, validateUserV3ConfigNoAuthNoPriv) {
1:  354:  SnmpConfig config;
call    0 returned 1
1:  355:  config.user_.emplace_back(User { "name1234", Access::ReadWrite, SecurityLevel::NoAuthNoPriv,
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
-:  356:      AuthenticationType::None, "", Privacy::None, "" });
1:  357:  auto result = Validate(config);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1*:  358:  EXPECT_TRUE(result.IsOk());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
1:  359:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  360:
-:  361:}  // wago::util
