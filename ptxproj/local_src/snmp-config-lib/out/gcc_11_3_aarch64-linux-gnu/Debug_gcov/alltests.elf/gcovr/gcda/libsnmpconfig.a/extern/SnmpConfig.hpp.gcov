-:    0:Source:extern/SnmpConfig.hpp
-:    1://------------------------------------------------------------------------------
-:    2:// Copyright (c) WAGO Kontakttechnik GmbH & Co. KG
-:    3://
-:    4:// PROPRIETARY RIGHTS are involved in the subject matter of this material. All
-:    5:// manufacturing, reproduction, use and sales rights pertaining to this
-:    6:// subject matter are governed by the license agreement. The recipient of this
-:    7:// software implicitly accepts the terms of the license.
-:    8://------------------------------------------------------------------------------
-:    9:
-:   10:#pragma once
-:   11:
-:   12:#include <string>
-:   13:#include <vector>
-:   14:
-:   15:#include "Status.hpp"
-:   16:
-:   17:namespace wago::snmp_config_lib {
-:   18:
-:   19:enum class VersionV1V2c : uint16_t {
-:   20:  V1  = 0,
-:   21:  V2c = 1,
-:   22:};
-:   23:
-:   24:enum class Access : uint16_t {
-:   25:  ReadOnly  = 0,
-:   26:  ReadWrite = 1,
-:   27:};
-:   28:
-:   29:enum class AuthenticationType : uint16_t {
-:   30:  None   = 0,
-:   31:  MD5    = 1,
-:   32:  SHA    = 2,
-:   33:  SHA224 = 3,
-:   34:  SHA256 = 4,
-:   35:  SHA384 = 5,
-:   36:  SHA512 = 6,
-:   37:};
-:   38:
-:   39:enum class Privacy : uint16_t {
-:   40:  None    = 0,
-:   41:  DES     = 1,
-:   42:  AES     = 2,
-:   43:  AES128  = 3,
-:   44:  AES192  = 4,
-:   45:  AES192C = 5,
-:   46:  AES256  = 6,
-:   47:  AES256C = 7,
-:   48:};
-:   49:
-:   50:enum class SecurityLevel : uint16_t {
-:   51:  NoAuthNoPriv = 0,
-:   52:  AuthNoPriv   = 1,
-:   53:  AuthPriv     = 2,
-:   54:};
-:   55:
-:   56:class Community {
-:   57: public:
-:   58:  Community() = default;
-:   59:  Community(::std::string name, Access access);
-:   60:
-:   61:  bool operator==(const Community &rhs) const;
-:   62:  bool operator<(const Community &rhs) const;
-:   63:
-:   64:  ::std::string name_;
-:   65:  Access access_ = Access::ReadOnly;
-:   66:};
-:   67:
-:   68:class TrapReceiverV1V2c {
-:   69: public:
-:   70:  TrapReceiverV1V2c() = default;
-:   71:  TrapReceiverV1V2c(::std::string host, ::std::string community, VersionV1V2c version);
-:   72:  bool operator==(const TrapReceiverV1V2c &rhs) const;
-:   73:  bool operator<(const TrapReceiverV1V2c &rhs) const;
-:   74:
-:   75:  ::std::string host_;
-:   76:  ::std::string community_;
-:   77:  VersionV1V2c version_ = VersionV1V2c::V2c;
-:   78:};
-:   79:
-:   80:class User {
-:   81: public:
-:   82:  User() = default;
-:   83:  explicit User(::std::string &name);
-:   84:  User(::std::string name, Access access, SecurityLevel security_level, AuthenticationType authentication_type,
-:   85:       ::std::string authentication_key, Privacy privacy, ::std::string privacy_key);
-:   86:  bool operator==(const User &rhs) const;
-:   87:  bool operator<(const User &rhs) const;
-:   88:
-:   89:  ::std::string name_;
-:   90:  Access access_                          = Access::ReadWrite;
-:   91:  SecurityLevel security_level_           = SecurityLevel::NoAuthNoPriv;
-:   92:  AuthenticationType authentication_type_ = AuthenticationType::None;
-:   93:  ::std::string authentication_key_;
-:   94:  Privacy privacy_ = Privacy::None;
-:   95:  ::std::string privacy_key_;
-:   96:};
-:   97:
-:   98:class TrapReceiverV3 {
-:   99: public:
-:  100:  TrapReceiverV3() = default;
-:  101:  TrapReceiverV3(::std::string name, SecurityLevel security_level, AuthenticationType authentication_type,
-:  102:                 ::std::string authentication_key, Privacy privacy, ::std::string privacy_key, ::std::string host);
-:  103:  bool operator==(const TrapReceiverV3 &rhs) const;
-:  104:  bool operator<(const TrapReceiverV3 &rhs) const;
-:  105:
-:  106:  ::std::string name_;
-:  107:  SecurityLevel security_level_           = SecurityLevel::NoAuthNoPriv;
-:  108:  AuthenticationType authentication_type_ = AuthenticationType::None;
-:  109:  ::std::string authentication_key_;
-:  110:  Privacy privacy_ = Privacy::None;
-:  111:  ::std::string privacy_key_;
-:  112:  ::std::string host_;
-:  113:};
-:  114:
-:  115:class SnmpConfig {
-:  116: public:
function _ZN4wago15snmp_config_lib10SnmpConfigC2Ev called 0 returned 0% blocks executed 0%
#####:  117:  SnmpConfig()                                   = default;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
#####:  118:  virtual ~SnmpConfig()                          = default;
------------------
_ZN4wago15snmp_config_lib10SnmpConfigD0Ev:
function _ZN4wago15snmp_config_lib10SnmpConfigD0Ev called 0 returned 0% blocks executed 0%
#####:  118:  virtual ~SnmpConfig()                          = default;
call    0 never executed
call    1 never executed
------------------
_ZN4wago15snmp_config_lib10SnmpConfigD2Ev:
function _ZN4wago15snmp_config_lib10SnmpConfigD2Ev called 0 returned 0% blocks executed 0%
#####:  118:  virtual ~SnmpConfig()                          = default;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
------------------
-:  119:  SnmpConfig(const SnmpConfig &other)            = default;
-:  120:  SnmpConfig(SnmpConfig &&other)                 = default;
-:  121:  SnmpConfig &operator=(const SnmpConfig &other) = default;
-:  122:  SnmpConfig &operator=(SnmpConfig &&other)      = default;
-:  123:  bool operator==(const SnmpConfig &rhs) const;
-:  124:  bool operator!=(const SnmpConfig &rhs) const;
-:  125:
-:  126:  bool snmp_enable_ = false;
-:  127:
-:  128:  ::std::string sys_name_;
-:  129:  ::std::string sys_descr_;
-:  130:  ::std::string sys_service_;
-:  131:  ::std::string sys_location_;
-:  132:  ::std::string sys_objectID_;
-:  133:  ::std::string sys_contact_;
-:  134:
-:  135:  ::std::vector<Community> communities_;
-:  136:  ::std::vector<TrapReceiverV1V2c> trap_receivers_V1V2c_;
-:  137:  ::std::vector<User> user_;
-:  138:  ::std::vector<TrapReceiverV3> trap_receivers_V3_;
-:  139:};
-:  140:
-:  141:SnmpConfig ReadSnmpConfig();
-:  142:
-:  143:Statuses WriteSnmpConfig(const SnmpConfig &config);
-:  144:
-:  145:}  // namespace wago::snmp_config_lib
