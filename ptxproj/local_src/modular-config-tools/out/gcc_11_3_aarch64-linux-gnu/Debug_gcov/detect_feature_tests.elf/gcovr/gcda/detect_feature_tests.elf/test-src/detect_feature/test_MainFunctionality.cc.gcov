-:    0:Source:test-src/detect_feature/test_MainFunctionality.cc
-:    1://------------------------------------------------------------------------------
-:    2:// This Source Code Form is subject to the terms of the Mozilla Public
-:    3:// License, v. 2.0. If a copy of the MPL was not distributed with this
-:    4:// file, You can obtain one at http://mozilla.org/MPL/2.0/.
-:    5://
-:    6:// This file is part of project modular-config-tools (PTXdist package modular-config-tools).
-:    7://
-:    8:// Copyright (c) 2019-2022 WAGO GmbH & Co. KG
-:    9://------------------------------------------------------------------------------
-:   10://------------------------------------------------------------------------------
-:   11:///  \file     test_MainFunctionality.cc
-:   12:///
-:   13:///  \brief    Tests for config tool detect_feature main functionality.
-:   14:///
-:   15:///  \author   PEn: WAGO GmbH & Co. KG
-:   16://------------------------------------------------------------------------------
-:   17:
-:   18://------------------------------------------------------------------------------
-:   19:// include files
-:   20://------------------------------------------------------------------------------
-:   21:#include "ctparts/common_main_defaults.h"
-:   22:#include "ctparts/ctmain.h"
-:   23:#include "params.h"
-:   24:#include "resources.h"
-:   25:#include <gtest/gtest.h>
-:   26:#include <cstdlib>
-:   27:#include <cstring>
-:   28:#include <algorithm>
-:   29:
-:   30://------------------------------------------------------------------------------
-:   31:// macros
-:   32://------------------------------------------------------------------------------
-:   33:
-:   34://------------------------------------------------------------------------------
-:   35:// defines; structure, enumeration and type definitions
-:   36://------------------------------------------------------------------------------
-:   37:#define MAX_TESTDIR_ENTRIES                                                    8
-:   38:
-:   39:class MainFunctionalityTest_detect_feature : public ::testing::Test
-:   40:{
-:   41:  private:
-:   42:
-:   43:  protected:
-:   44:    ctutil_Options_t stOptions;
-:   45:    ctutil_Resources_t stResources;
-:   46:
-:   47:  protected:
function _ZN36MainFunctionalityTest_detect_featureC2Ev called 12 returned 100% blocks executed 100%
12:   48:    MainFunctionalityTest_detect_feature() {};
call    0 returned 12
12*:   49:    virtual ~MainFunctionalityTest_detect_feature() {};
------------------
_ZN36MainFunctionalityTest_detect_featureD0Ev:
function _ZN36MainFunctionalityTest_detect_featureD0Ev called 0 returned 0% blocks executed 0%
#####:   49:    virtual ~MainFunctionalityTest_detect_feature() {};
call    0 never executed
call    1 never executed
------------------
_ZN36MainFunctionalityTest_detect_featureD2Ev:
function _ZN36MainFunctionalityTest_detect_featureD2Ev called 12 returned 100% blocks executed 100%
12:   49:    virtual ~MainFunctionalityTest_detect_feature() {};
call    0 returned 12
------------------
function _ZN36MainFunctionalityTest_detect_feature5SetUpEv called 12 returned 100% blocks executed 37%
12:   50:    virtual void SetUp()
-:   51:    {
12:   52:      statusCode_t status = CTUTIL_SUCCESS;
-:   53:
-:   54:      // Prepare options
12:   55:      memset(&(this->stOptions), 0, sizeof(this->stOptions));
12:   56:      status = ctparts_SetOptionDefaults(NULL, &(this->stOptions));
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
12*:   57:      ASSERT_EQ(CTUTIL_SUCCESS, status);
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 12
branch  4 taken 0 (fallthrough)
branch  5 taken 12
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 12
branch 19 taken 12 (fallthrough)
branch 20 taken 0
call   21 never executed
call   22 never executed
call   23 never executed
-:   58:
-:   59:      // Prepare resources
12:   60:      memset(&(this->stResources), 0, sizeof(this->stResources));
12:   61:      this->stResources.pstSpecificResources = (ctutil_ResourcesSpecific_t *)malloc(sizeof(ctutil_ResourcesSpecific_t));
12:   62:      memset(this->stResources.pstSpecificResources, 0, sizeof(*(this->stResources.pstSpecificResources)));
-:   63:    }
function _ZN36MainFunctionalityTest_detect_feature8TearDownEv called 12 returned 100% blocks executed 100%
12:   64:    virtual void TearDown()
-:   65:    {
-:   66:      // Clean resources and options
12:   67:      free(this->stResources.pstSpecificResources);
12:   68:      ctparts_ReleaseSpecificOptions(NULL, &(this->stOptions));
call    0 returned 12
12:   69:    }
-:   70:};
-:   71:
-:   72://------------------------------------------------------------------------------
-:   73:// variables' and constants' definitions
-:   74://------------------------------------------------------------------------------
-:   75:static struct dirent arTestDirectoryContent[MAX_TESTDIR_ENTRIES];
-:   76:static unsigned currentDirectoryEntry = 0;
-:   77:
-:   78://------------------------------------------------------------------------------
-:   79:// test implementation
-:   80://------------------------------------------------------------------------------
4:   81:TEST_F(MainFunctionalityTest_detect_feature, CheckSetup)
-:   82:{
-:   83:  // Nothing to do here, everything is done in SetUp/TearDown
1:   84:}
------------------
_ZN52MainFunctionalityTest_detect_feature_CheckSetup_TestC2Ev:
function _ZN52MainFunctionalityTest_detect_feature_CheckSetup_TestC2Ev called 1 returned 100% blocks executed 100%
1:   81:TEST_F(MainFunctionalityTest_detect_feature, CheckSetup)
call    0 returned 1
------------------
_ZN52MainFunctionalityTest_detect_feature_CheckSetup_TestD0Ev:
function _ZN52MainFunctionalityTest_detect_feature_CheckSetup_TestD0Ev called 1 returned 100% blocks executed 100%
1:   81:TEST_F(MainFunctionalityTest_detect_feature, CheckSetup)
call    0 returned 1
call    1 returned 1
------------------
_ZN52MainFunctionalityTest_detect_feature_CheckSetup_TestD2Ev:
function _ZN52MainFunctionalityTest_detect_feature_CheckSetup_TestD2Ev called 1 returned 100% blocks executed 100%
1:   81:TEST_F(MainFunctionalityTest_detect_feature, CheckSetup)
call    0 returned 1
------------------
_ZN52MainFunctionalityTest_detect_feature_CheckSetup_Test8TestBodyEv:
function _ZN52MainFunctionalityTest_detect_feature_CheckSetup_Test8TestBodyEv called 1 returned 100% blocks executed 100%
1:   81:TEST_F(MainFunctionalityTest_detect_feature, CheckSetup)
-:   82:{
-:   83:  // Nothing to do here, everything is done in SetUp/TearDown
1:   84:}
------------------
-:   85:
-:   86:
4:   87:TEST_F(MainFunctionalityTest_detect_feature, NoOptionQuiet)
-:   88:{
1:   89:  char szArg00[] = "test";
1:   90:  char szArg01[] = "plainOptionShouldBeIgnored";
-:   91:  char * const arszArgs[]
-:   92:  {
-:   93:    szArg00,
-:   94:    szArg01,
1:   95:  };
1:   96:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:   97:  this->stOptions.stCommonOptions.quiet = true;
-:   98:
1:   99:  testing::internal::CaptureStdout();
1:  100:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
2*:  101:  EXPECT_STREQ("", testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  102:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  103:}
------------------
_ZN55MainFunctionalityTest_detect_feature_NoOptionQuiet_TestC2Ev:
function _ZN55MainFunctionalityTest_detect_feature_NoOptionQuiet_TestC2Ev called 1 returned 100% blocks executed 100%
1:   87:TEST_F(MainFunctionalityTest_detect_feature, NoOptionQuiet)
call    0 returned 1
------------------
_ZN55MainFunctionalityTest_detect_feature_NoOptionQuiet_TestD0Ev:
function _ZN55MainFunctionalityTest_detect_feature_NoOptionQuiet_TestD0Ev called 1 returned 100% blocks executed 100%
1:   87:TEST_F(MainFunctionalityTest_detect_feature, NoOptionQuiet)
call    0 returned 1
call    1 returned 1
------------------
_ZN55MainFunctionalityTest_detect_feature_NoOptionQuiet_TestD2Ev:
function _ZN55MainFunctionalityTest_detect_feature_NoOptionQuiet_TestD2Ev called 1 returned 100% blocks executed 100%
1:   87:TEST_F(MainFunctionalityTest_detect_feature, NoOptionQuiet)
call    0 returned 1
------------------
_ZN55MainFunctionalityTest_detect_feature_NoOptionQuiet_Test8TestBodyEv:
function _ZN55MainFunctionalityTest_detect_feature_NoOptionQuiet_Test8TestBodyEv called 1 returned 100% blocks executed 29%
1:   87:TEST_F(MainFunctionalityTest_detect_feature, NoOptionQuiet)
-:   88:{
1:   89:  char szArg00[] = "test";
1:   90:  char szArg01[] = "plainOptionShouldBeIgnored";
-:   91:  char * const arszArgs[]
-:   92:  {
-:   93:    szArg00,
-:   94:    szArg01,
1:   95:  };
1:   96:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:   97:  this->stOptions.stCommonOptions.quiet = true;
-:   98:
1:   99:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  100:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2*:  101:  EXPECT_STREQ("", testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 returned 1
call   23 never executed
call   24 never executed
call   25 never executed
1*:  102:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  103:}
------------------
-:  104:
-:  105:
function _ZL20ResolveRealPathDummyPKcPc called 9 returned 100% blocks executed 100%
9:  106:static char * ResolveRealPathDummy(char const * const szFilePath,
-:  107:                                   char * const szResolvedPath)
-:  108:{
9:  109:  return strcpy(szResolvedPath, szFilePath);
-:  110:}
-:  111:
-:  112:
function _ZL19ResolveRealPathFailPKcPc called 1 returned 100% blocks executed 100%
1:  113:static char * ResolveRealPathFail(char const *,
-:  114:                                  char *)
-:  115:{
1:  116:  return nullptr;
-:  117:}
-:  118:
-:  119:
function _ZL19ResolveRealPathRootPKcPc called 1 returned 100% blocks executed 68%
1:  120:static char * ResolveRealPathRoot(char const * const szFilePath,
-:  121:                                  char * const szResolvedPath)
-:  122:{
1:  123:  char * result = nullptr;
-:  124:
1:  125:  std::string filePath = szFilePath;
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  126:  size_t const lastPart = filePath.rfind('/');
call    0 returned 1
1:  127:  if(lastPart == std::string::npos)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
-:  128:  {
#####:  129:    result = strcpy(szResolvedPath, szFilePath);
-:  130:  }
-:  131:  else
-:  132:  {
1:  133:    result = strcpy(szResolvedPath, filePath.substr(lastPart).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
-:  134:  }
-:  135:
1:  136:  return result;
1:  137:}
call    0 returned 1
call    1 never executed
-:  138:
-:  139:
function _ZL19IsFileAvailableTruePK20ctutil_OptionsCommonPKcS3_ called 8 returned 100% blocks executed 100%
8:  140:static bool IsFileAvailableTrue(ctutil_OptionsCommon_t const *,
-:  141:                                char const *,
-:  142:                                char const *)
-:  143:{
8:  144:  return true;
-:  145:}
-:  146:
-:  147:
function _ZL20IsFileAvailableFalsePK20ctutil_OptionsCommonPKcS3_ called 1 returned 100% blocks executed 100%
1:  148:static bool IsFileAvailableFalse(ctutil_OptionsCommon_t const *,
-:  149:                                 char const *,
-:  150:                                 char const *)
-:  151:{
1:  152:  return false;
-:  153:}
-:  154:
-:  155:
function _ZL24IsDependencyCompleteTruePKc called 7 returned 100% blocks executed 100%
7:  156:static bool IsDependencyCompleteTrue(char const *)
-:  157:{
7:  158:  return true;
-:  159:}
-:  160:
-:  161:
function _ZL25IsDependencyCompleteFalsePKc called 1 returned 100% blocks executed 100%
1:  162:static bool IsDependencyCompleteFalse(char const *)
-:  163:{
1:  164:  return false;
-:  165:}
-:  166:
-:  167:
4:  168:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeature)
-:  169:{
1:  170:  std::string const deviceFeatureTestPath = "/testpath";
1:  171:  std::string const featureNameToCheck = "feature-to-check";
1:  172:  std::string const expectedTextResult = featureNameToCheck + "=true";
-:  173:
1:  174:  char szArg00[] = "test";
1:  175:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  176:  char * const arszArgs[]
-:  177:  {
-:  178:    szArg00,
-:  179:    szArg01,
1:  180:  };
1:  181:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  182:  this->stOptions.stCommonOptions.quiet = true;
1:  183:  this->stOptions.stCommonOptions.textOutput = true;
1:  184:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
1:  185:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  186:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  187:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  188:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  189:
1:  190:  testing::internal::CaptureStdout();
1:  191:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
2*:  192:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  193:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  194:}
------------------
_ZN63MainFunctionalityTest_detect_feature_DetectSpecificFeature_TestC2Ev:
function _ZN63MainFunctionalityTest_detect_feature_DetectSpecificFeature_TestC2Ev called 1 returned 100% blocks executed 100%
1:  168:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeature)
call    0 returned 1
------------------
_ZN63MainFunctionalityTest_detect_feature_DetectSpecificFeature_TestD0Ev:
function _ZN63MainFunctionalityTest_detect_feature_DetectSpecificFeature_TestD0Ev called 1 returned 100% blocks executed 100%
1:  168:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeature)
call    0 returned 1
call    1 returned 1
------------------
_ZN63MainFunctionalityTest_detect_feature_DetectSpecificFeature_TestD2Ev:
function _ZN63MainFunctionalityTest_detect_feature_DetectSpecificFeature_TestD2Ev called 1 returned 100% blocks executed 100%
1:  168:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeature)
call    0 returned 1
------------------
_ZN63MainFunctionalityTest_detect_feature_DetectSpecificFeature_Test8TestBodyEv:
function _ZN63MainFunctionalityTest_detect_feature_DetectSpecificFeature_Test8TestBodyEv called 1 returned 100% blocks executed 36%
1:  168:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeature)
-:  169:{
1:  170:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  171:  std::string const featureNameToCheck = "feature-to-check";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  172:  std::string const expectedTextResult = featureNameToCheck + "=true";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
-:  173:
1:  174:  char szArg00[] = "test";
1:  175:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  176:  char * const arszArgs[]
-:  177:  {
-:  178:    szArg00,
-:  179:    szArg01,
1:  180:  };
1:  181:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  182:  this->stOptions.stCommonOptions.quiet = true;
1:  183:  this->stOptions.stCommonOptions.textOutput = true;
1:  184:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
call    0 returned 1
1:  185:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  186:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  187:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  188:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  189:
1:  190:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  191:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2*:  192:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
1*:  193:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  194:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 never executed
call    4 never executed
call    5 never executed
------------------
-:  195:
-:  196:
4:  197:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureValueOnly)
-:  198:{
1:  199:  std::string const deviceFeatureTestPath = "/testpath";
1:  200:  std::string const featureNameToCheck = "feature-to-check";
1:  201:  std::string const expectedTextResult = "true";
-:  202:
1:  203:  char szArg00[] = "test";
1:  204:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  205:  char * const arszArgs[]
-:  206:  {
-:  207:    szArg00,
-:  208:    szArg01,
1:  209:  };
1:  210:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  211:  this->stOptions.stCommonOptions.quiet = true;
1:  212:  this->stOptions.stCommonOptions.textOutput = true;
1:  213:  this->stOptions.pstSpecificOptions->onlyValue = true;
1:  214:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
1:  215:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  216:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  217:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  218:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  219:
1:  220:  testing::internal::CaptureStdout();
1:  221:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
2*:  222:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  223:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  224:}
------------------
_ZN72MainFunctionalityTest_detect_feature_DetectSpecificFeatureValueOnly_TestC2Ev:
function _ZN72MainFunctionalityTest_detect_feature_DetectSpecificFeatureValueOnly_TestC2Ev called 1 returned 100% blocks executed 100%
1:  197:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureValueOnly)
call    0 returned 1
------------------
_ZN72MainFunctionalityTest_detect_feature_DetectSpecificFeatureValueOnly_TestD0Ev:
function _ZN72MainFunctionalityTest_detect_feature_DetectSpecificFeatureValueOnly_TestD0Ev called 1 returned 100% blocks executed 100%
1:  197:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureValueOnly)
call    0 returned 1
call    1 returned 1
------------------
_ZN72MainFunctionalityTest_detect_feature_DetectSpecificFeatureValueOnly_TestD2Ev:
function _ZN72MainFunctionalityTest_detect_feature_DetectSpecificFeatureValueOnly_TestD2Ev called 1 returned 100% blocks executed 100%
1:  197:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureValueOnly)
call    0 returned 1
------------------
_ZN72MainFunctionalityTest_detect_feature_DetectSpecificFeatureValueOnly_Test8TestBodyEv:
function _ZN72MainFunctionalityTest_detect_feature_DetectSpecificFeatureValueOnly_Test8TestBodyEv called 1 returned 100% blocks executed 37%
1:  197:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureValueOnly)
-:  198:{
1:  199:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  200:  std::string const featureNameToCheck = "feature-to-check";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  201:  std::string const expectedTextResult = "true";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
-:  202:
1:  203:  char szArg00[] = "test";
1:  204:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  205:  char * const arszArgs[]
-:  206:  {
-:  207:    szArg00,
-:  208:    szArg01,
1:  209:  };
1:  210:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  211:  this->stOptions.stCommonOptions.quiet = true;
1:  212:  this->stOptions.stCommonOptions.textOutput = true;
1:  213:  this->stOptions.pstSpecificOptions->onlyValue = true;
1:  214:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
call    0 returned 1
1:  215:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  216:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  217:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  218:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  219:
1:  220:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  221:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2*:  222:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
1*:  223:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  224:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 never executed
call    4 never executed
call    5 never executed
------------------
-:  225:
-:  226:
4:  227:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureJson)
-:  228:{
1:  229:  std::string const deviceFeatureTestPath = "/testpath";
1:  230:  std::string const featureNameToCheck = "feature-to-check";
1:  231:  std::string const expectedJsonResult = ("{\"" + featureNameToCheck + "\":true}");
-:  232:
1:  233:  char szArg00[] = "test";
1:  234:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  235:  char * const arszArgs[]
-:  236:  {
-:  237:    szArg00,
-:  238:    szArg01,
1:  239:  };
1:  240:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  241:  this->stOptions.stCommonOptions.quiet = true;
1:  242:  this->stOptions.stCommonOptions.jsonOutput = true;
1:  243:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
1:  244:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  245:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  246:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  247:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  248:
1:  249:  testing::internal::CaptureStdout();
1:  250:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
1:  251:  std::string capturedOutput = testing::internal::GetCapturedStdout();
1:  252:  capturedOutput.erase(remove_if(capturedOutput.begin(), capturedOutput.end(), isspace), capturedOutput.end());
1*:  253:  EXPECT_STREQ(expectedJsonResult.c_str(), capturedOutput.c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  254:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  255:}
------------------
_ZN67MainFunctionalityTest_detect_feature_DetectSpecificFeatureJson_TestC2Ev:
function _ZN67MainFunctionalityTest_detect_feature_DetectSpecificFeatureJson_TestC2Ev called 1 returned 100% blocks executed 100%
1:  227:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureJson)
call    0 returned 1
------------------
_ZN67MainFunctionalityTest_detect_feature_DetectSpecificFeatureJson_TestD0Ev:
function _ZN67MainFunctionalityTest_detect_feature_DetectSpecificFeatureJson_TestD0Ev called 1 returned 100% blocks executed 100%
1:  227:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureJson)
call    0 returned 1
call    1 returned 1
------------------
_ZN67MainFunctionalityTest_detect_feature_DetectSpecificFeatureJson_TestD2Ev:
function _ZN67MainFunctionalityTest_detect_feature_DetectSpecificFeatureJson_TestD2Ev called 1 returned 100% blocks executed 100%
1:  227:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureJson)
call    0 returned 1
------------------
_ZN67MainFunctionalityTest_detect_feature_DetectSpecificFeatureJson_Test8TestBodyEv:
function _ZN67MainFunctionalityTest_detect_feature_DetectSpecificFeatureJson_Test8TestBodyEv called 1 returned 100% blocks executed 40%
1:  227:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureJson)
-:  228:{
1:  229:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  230:  std::string const featureNameToCheck = "feature-to-check";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  231:  std::string const expectedJsonResult = ("{\"" + featureNameToCheck + "\":true}");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
-:  232:
1:  233:  char szArg00[] = "test";
1:  234:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  235:  char * const arszArgs[]
-:  236:  {
-:  237:    szArg00,
-:  238:    szArg01,
1:  239:  };
1:  240:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  241:  this->stOptions.stCommonOptions.quiet = true;
1:  242:  this->stOptions.stCommonOptions.jsonOutput = true;
1:  243:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
call    0 returned 1
1:  244:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  245:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  246:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  247:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  248:
1:  249:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  250:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  251:  std::string capturedOutput = testing::internal::GetCapturedStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  252:  capturedOutput.erase(remove_if(capturedOutput.begin(), capturedOutput.end(), isspace), capturedOutput.end());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
1*:  253:  EXPECT_STREQ(expectedJsonResult.c_str(), capturedOutput.c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 returned 1
call   21 never executed
call   22 never executed
call   23 never executed
1*:  254:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  255:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
------------------
-:  256:
-:  257:
4:  258:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailNoFile)
-:  259:{
1:  260:  std::string const deviceFeatureTestPath = "/testpath";
1:  261:  std::string const featureNameToCheck = "feature-to-check";
1:  262:  std::string const expectedTextResult = featureNameToCheck + "=false";
-:  263:
1:  264:  char szArg00[] = "test";
1:  265:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  266:  char * const arszArgs[]
-:  267:  {
-:  268:    szArg00,
-:  269:    szArg01,
1:  270:  };
1:  271:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  272:  this->stOptions.stCommonOptions.quiet = true;
1:  273:  this->stOptions.stCommonOptions.textOutput = true;
1:  274:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
1:  275:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  276:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  277:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableFalse;
1:  278:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  279:
1:  280:  testing::internal::CaptureStdout();
1:  281:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
2*:  282:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  283:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  284:}
------------------
_ZN73MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailNoFile_TestC2Ev:
function _ZN73MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailNoFile_TestC2Ev called 1 returned 100% blocks executed 100%
1:  258:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailNoFile)
call    0 returned 1
------------------
_ZN73MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailNoFile_TestD0Ev:
function _ZN73MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailNoFile_TestD0Ev called 1 returned 100% blocks executed 100%
1:  258:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailNoFile)
call    0 returned 1
call    1 returned 1
------------------
_ZN73MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailNoFile_TestD2Ev:
function _ZN73MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailNoFile_TestD2Ev called 1 returned 100% blocks executed 100%
1:  258:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailNoFile)
call    0 returned 1
------------------
_ZN73MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailNoFile_Test8TestBodyEv:
function _ZN73MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailNoFile_Test8TestBodyEv called 1 returned 100% blocks executed 36%
1:  258:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailNoFile)
-:  259:{
1:  260:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  261:  std::string const featureNameToCheck = "feature-to-check";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  262:  std::string const expectedTextResult = featureNameToCheck + "=false";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
-:  263:
1:  264:  char szArg00[] = "test";
1:  265:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  266:  char * const arszArgs[]
-:  267:  {
-:  268:    szArg00,
-:  269:    szArg01,
1:  270:  };
1:  271:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  272:  this->stOptions.stCommonOptions.quiet = true;
1:  273:  this->stOptions.stCommonOptions.textOutput = true;
1:  274:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
call    0 returned 1
1:  275:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  276:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  277:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableFalse;
1:  278:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  279:
1:  280:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  281:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2*:  282:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
1*:  283:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  284:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 never executed
call    4 never executed
call    5 never executed
------------------
-:  285:
-:  286:
4:  287:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailDependencyIncomplete)
-:  288:{
1:  289:  std::string const deviceFeatureTestPath = "/testpath";
1:  290:  std::string const featureNameToCheck = "feature-to-check";
1:  291:  std::string const expectedTextResult = featureNameToCheck + "=false";
-:  292:
1:  293:  char szArg00[] = "test";
1:  294:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  295:  char * const arszArgs[]
-:  296:  {
-:  297:    szArg00,
-:  298:    szArg01,
1:  299:  };
1:  300:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  301:  this->stOptions.stCommonOptions.quiet = true;
1:  302:  this->stOptions.stCommonOptions.textOutput = true;
1:  303:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
1:  304:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  305:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  306:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  307:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteFalse;
-:  308:
1:  309:  testing::internal::CaptureStdout();
1:  310:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
2*:  311:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  312:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  313:}
------------------
_ZN87MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailDependencyIncomplete_TestC2Ev:
function _ZN87MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailDependencyIncomplete_TestC2Ev called 1 returned 100% blocks executed 100%
1:  287:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailDependencyIncomplete)
call    0 returned 1
------------------
_ZN87MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailDependencyIncomplete_TestD0Ev:
function _ZN87MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailDependencyIncomplete_TestD0Ev called 1 returned 100% blocks executed 100%
1:  287:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailDependencyIncomplete)
call    0 returned 1
call    1 returned 1
------------------
_ZN87MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailDependencyIncomplete_TestD2Ev:
function _ZN87MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailDependencyIncomplete_TestD2Ev called 1 returned 100% blocks executed 100%
1:  287:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailDependencyIncomplete)
call    0 returned 1
------------------
_ZN87MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailDependencyIncomplete_Test8TestBodyEv:
function _ZN87MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailDependencyIncomplete_Test8TestBodyEv called 1 returned 100% blocks executed 36%
1:  287:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailDependencyIncomplete)
-:  288:{
1:  289:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  290:  std::string const featureNameToCheck = "feature-to-check";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  291:  std::string const expectedTextResult = featureNameToCheck + "=false";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
-:  292:
1:  293:  char szArg00[] = "test";
1:  294:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  295:  char * const arszArgs[]
-:  296:  {
-:  297:    szArg00,
-:  298:    szArg01,
1:  299:  };
1:  300:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  301:  this->stOptions.stCommonOptions.quiet = true;
1:  302:  this->stOptions.stCommonOptions.textOutput = true;
1:  303:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
call    0 returned 1
1:  304:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  305:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  306:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  307:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteFalse;
-:  308:
1:  309:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  310:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2*:  311:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
1*:  312:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  313:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 never executed
call    4 never executed
call    5 never executed
------------------
-:  314:
-:  315:
4:  316:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailResolveError)
-:  317:{
1:  318:  std::string const deviceFeatureTestPath = "/testpath";
1:  319:  std::string const featureNameToCheck    = "feature-to-check";
1:  320:  std::string const expectedTextResult    = featureNameToCheck + "=false";
-:  321:
1:  322:  char szArg00[] = "test";
1:  323:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  324:  char * const arszArgs[]
-:  325:  {
-:  326:    szArg00,
-:  327:    szArg01,
1:  328:  };
1:  329:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  330:  this->stOptions.stCommonOptions.quiet = true;
1:  331:  this->stOptions.stCommonOptions.textOutput = true;
1:  332:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
1:  333:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  334:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathFail;
1:  335:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  336:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  337:
1:  338:  testing::internal::CaptureStdout();
1:  339:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
2*:  340:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  341:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  342:}
------------------
_ZN79MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailResolveError_TestC2Ev:
function _ZN79MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailResolveError_TestC2Ev called 1 returned 100% blocks executed 100%
1:  316:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailResolveError)
call    0 returned 1
------------------
_ZN79MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailResolveError_TestD0Ev:
function _ZN79MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailResolveError_TestD0Ev called 1 returned 100% blocks executed 100%
1:  316:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailResolveError)
call    0 returned 1
call    1 returned 1
------------------
_ZN79MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailResolveError_TestD2Ev:
function _ZN79MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailResolveError_TestD2Ev called 1 returned 100% blocks executed 100%
1:  316:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailResolveError)
call    0 returned 1
------------------
_ZN79MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailResolveError_Test8TestBodyEv:
function _ZN79MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailResolveError_Test8TestBodyEv called 1 returned 100% blocks executed 36%
1:  316:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailResolveError)
-:  317:{
1:  318:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  319:  std::string const featureNameToCheck    = "feature-to-check";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  320:  std::string const expectedTextResult    = featureNameToCheck + "=false";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
-:  321:
1:  322:  char szArg00[] = "test";
1:  323:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  324:  char * const arszArgs[]
-:  325:  {
-:  326:    szArg00,
-:  327:    szArg01,
1:  328:  };
1:  329:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  330:  this->stOptions.stCommonOptions.quiet = true;
1:  331:  this->stOptions.stCommonOptions.textOutput = true;
1:  332:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
call    0 returned 1
1:  333:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  334:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathFail;
1:  335:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  336:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  337:
1:  338:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  339:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2*:  340:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
1*:  341:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  342:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 never executed
call    4 never executed
call    5 never executed
------------------
-:  343:
-:  344:
4:  345:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailEvilFeature)
-:  346:{
1:  347:  std::string const deviceFeatureTestPath = "/testpath";
1:  348:  std::string const featureNameToCheck    = "../evil-feature";
1:  349:  std::string const expectedTextResult    = featureNameToCheck + "=false";
-:  350:
1:  351:  char szArg00[] = "test";
1:  352:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  353:  char * const arszArgs[]
-:  354:  {
-:  355:    szArg00,
-:  356:    szArg01,
1:  357:  };
1:  358:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  359:  this->stOptions.stCommonOptions.quiet = true;
1:  360:  this->stOptions.stCommonOptions.textOutput = true;
1:  361:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
1:  362:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  363:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathRoot;
1:  364:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  365:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  366:
1:  367:  testing::internal::CaptureStdout();
1:  368:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
2*:  369:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  370:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  371:}
------------------
_ZN78MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailEvilFeature_TestC2Ev:
function _ZN78MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailEvilFeature_TestC2Ev called 1 returned 100% blocks executed 100%
1:  345:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailEvilFeature)
call    0 returned 1
------------------
_ZN78MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailEvilFeature_TestD0Ev:
function _ZN78MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailEvilFeature_TestD0Ev called 1 returned 100% blocks executed 100%
1:  345:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailEvilFeature)
call    0 returned 1
call    1 returned 1
------------------
_ZN78MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailEvilFeature_TestD2Ev:
function _ZN78MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailEvilFeature_TestD2Ev called 1 returned 100% blocks executed 100%
1:  345:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailEvilFeature)
call    0 returned 1
------------------
_ZN78MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailEvilFeature_Test8TestBodyEv:
function _ZN78MainFunctionalityTest_detect_feature_DetectSpecificFeatureFailEvilFeature_Test8TestBodyEv called 1 returned 100% blocks executed 36%
1:  345:TEST_F(MainFunctionalityTest_detect_feature, DetectSpecificFeatureFailEvilFeature)
-:  346:{
1:  347:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  348:  std::string const featureNameToCheck    = "../evil-feature";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  349:  std::string const expectedTextResult    = featureNameToCheck + "=false";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
-:  350:
1:  351:  char szArg00[] = "test";
1:  352:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  353:  char * const arszArgs[]
-:  354:  {
-:  355:    szArg00,
-:  356:    szArg01,
1:  357:  };
1:  358:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  359:  this->stOptions.stCommonOptions.quiet = true;
1:  360:  this->stOptions.stCommonOptions.textOutput = true;
1:  361:  this->stOptions.pstSpecificOptions->szFeature = featureNameToCheck.c_str();
call    0 returned 1
1:  362:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  363:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathRoot;
1:  364:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  365:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
-:  366:
1:  367:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  368:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2*:  369:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
1*:  370:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  371:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 never executed
call    4 never executed
call    5 never executed
------------------
-:  372:
-:  373:
function _ZL11OpenDirTestPKc called 3 returned 100% blocks executed 100%
3:  374:static DIR * OpenDirTest(char const * const)
-:  375:{
3:  376:  currentDirectoryEntry = 0;
3:  377:  return (DIR *)arTestDirectoryContent;
-:  378:}
-:  379:
function _ZL11ReadDirTestP11__dirstream called 13 returned 100% blocks executed 100%
13:  380:static struct dirent * ReadDirTest(DIR * const pDir)
-:  381:{
13:  382:  struct dirent * resultEntry = &(arTestDirectoryContent[currentDirectoryEntry++]);
13:  383:  if(    (pDir != (DIR *)arTestDirectoryContent)
branch  0 taken 13 (fallthrough)
branch  1 taken 0
13:  384:      || (currentDirectoryEntry > MAX_TESTDIR_ENTRIES)
branch  0 taken 13 (fallthrough)
branch  1 taken 0
13:  385:      || (resultEntry->d_name[0] == '\0'))
branch  0 taken 3 (fallthrough)
branch  1 taken 10
-:  386:  {
3:  387:    resultEntry = nullptr;
-:  388:  }
-:  389:
13:  390:  return resultEntry;
-:  391:}
-:  392:
function _ZL12CloseDirTestP11__dirstream called 3 returned 100% blocks executed 100%
3:  393:static int CloseDirTest(DIR * const pDir)
-:  394:{
3:  395:  int result = -1;
-:  396:
3:  397:  if(pDir == (DIR *)arTestDirectoryContent)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
-:  398:  {
3:  399:    result = 0;
-:  400:  }
-:  401:
3:  402:  return result;
-:  403:}
-:  404:
-:  405:
4:  406:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListEmpty)
-:  407:{
1:  408:  std::string const deviceFeatureTestPath = "/testpath";
1:  409:  std::string const expectedTextResult    = "";
1:  410:  memset(arTestDirectoryContent, 0, sizeof(arTestDirectoryContent));
1:  411:  strcpy(arTestDirectoryContent[0].d_name, ".");
1:  412:  strcpy(arTestDirectoryContent[1].d_name, "..");
-:  413:
1:  414:  char szArg00[] = "test";
1:  415:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  416:  char * const arszArgs[]
-:  417:  {
-:  418:    szArg00,
-:  419:    szArg01,
1:  420:  };
1:  421:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  422:  this->stOptions.stCommonOptions.quiet = true;
1:  423:  this->stOptions.stCommonOptions.textOutput = true;
1:  424:  this->stOptions.pstSpecificOptions->listMode = true;
1:  425:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  426:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  427:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  428:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
1:  429:  this->stResources.pstSpecificResources->pfOpenDir = &OpenDirTest;
1:  430:  this->stResources.pstSpecificResources->pfReadDir = &ReadDirTest;
1:  431:  this->stResources.pstSpecificResources->pfCloseDir = &CloseDirTest;
-:  432:
1:  433:  testing::internal::CaptureStdout();
1:  434:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
2*:  435:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  436:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  437:}
------------------
_ZN63MainFunctionalityTest_detect_feature_FetchFeatureListEmpty_TestC2Ev:
function _ZN63MainFunctionalityTest_detect_feature_FetchFeatureListEmpty_TestC2Ev called 1 returned 100% blocks executed 100%
1:  406:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListEmpty)
call    0 returned 1
------------------
_ZN63MainFunctionalityTest_detect_feature_FetchFeatureListEmpty_TestD0Ev:
function _ZN63MainFunctionalityTest_detect_feature_FetchFeatureListEmpty_TestD0Ev called 1 returned 100% blocks executed 100%
1:  406:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListEmpty)
call    0 returned 1
call    1 returned 1
------------------
_ZN63MainFunctionalityTest_detect_feature_FetchFeatureListEmpty_TestD2Ev:
function _ZN63MainFunctionalityTest_detect_feature_FetchFeatureListEmpty_TestD2Ev called 1 returned 100% blocks executed 100%
1:  406:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListEmpty)
call    0 returned 1
------------------
_ZN63MainFunctionalityTest_detect_feature_FetchFeatureListEmpty_Test8TestBodyEv:
function _ZN63MainFunctionalityTest_detect_feature_FetchFeatureListEmpty_Test8TestBodyEv called 1 returned 100% blocks executed 35%
1:  406:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListEmpty)
-:  407:{
1:  408:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  409:  std::string const expectedTextResult    = "";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  410:  memset(arTestDirectoryContent, 0, sizeof(arTestDirectoryContent));
1:  411:  strcpy(arTestDirectoryContent[0].d_name, ".");
1:  412:  strcpy(arTestDirectoryContent[1].d_name, "..");
-:  413:
1:  414:  char szArg00[] = "test";
1:  415:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  416:  char * const arszArgs[]
-:  417:  {
-:  418:    szArg00,
-:  419:    szArg01,
1:  420:  };
1:  421:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  422:  this->stOptions.stCommonOptions.quiet = true;
1:  423:  this->stOptions.stCommonOptions.textOutput = true;
1:  424:  this->stOptions.pstSpecificOptions->listMode = true;
1:  425:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  426:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  427:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  428:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
1:  429:  this->stResources.pstSpecificResources->pfOpenDir = &OpenDirTest;
1:  430:  this->stResources.pstSpecificResources->pfReadDir = &ReadDirTest;
1:  431:  this->stResources.pstSpecificResources->pfCloseDir = &CloseDirTest;
-:  432:
1:  433:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  434:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2*:  435:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
1*:  436:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  437:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
------------------
-:  438:
-:  439:
4:  440:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureList)
-:  441:{
1:  442:  std::string const deviceFeatureTestPath = "/testpath";
1:  443:  std::string const feature_1 = "test-feature-1";
1:  444:  std::string const feature_2 = "test-feature-2";
1:  445:  std::string const expectedFeatureText_1 = feature_1 + "=true";
1:  446:  std::string const expectedFeatureText_2 = feature_2 + "=true";
2:  447:  std::string const expectedTextResult    = expectedFeatureText_1 + '\n' + expectedFeatureText_2 + '\n';
1:  448:  memset(arTestDirectoryContent, 0, sizeof(arTestDirectoryContent));
1:  449:  strcpy(arTestDirectoryContent[0].d_name, ".");
1:  450:  strcpy(arTestDirectoryContent[1].d_name, "..");
1:  451:  strcpy(arTestDirectoryContent[2].d_name, feature_1.c_str());
1:  452:  strcpy(arTestDirectoryContent[3].d_name, feature_2.c_str());
-:  453:
1:  454:  char szArg00[] = "test";
1:  455:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  456:  char * const arszArgs[]
-:  457:  {
-:  458:    szArg00,
-:  459:    szArg01,
1:  460:  };
1:  461:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  462:  this->stOptions.stCommonOptions.quiet = true;
1:  463:  this->stOptions.stCommonOptions.textOutput = true;
1:  464:  this->stOptions.pstSpecificOptions->listMode = true;
1:  465:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  466:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  467:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  468:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
1:  469:  this->stResources.pstSpecificResources->pfOpenDir = &OpenDirTest;
1:  470:  this->stResources.pstSpecificResources->pfReadDir = &ReadDirTest;
1:  471:  this->stResources.pstSpecificResources->pfCloseDir = &CloseDirTest;
-:  472:
1:  473:  testing::internal::CaptureStdout();
1:  474:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
2*:  475:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  476:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  477:}
------------------
_ZN58MainFunctionalityTest_detect_feature_FetchFeatureList_TestC2Ev:
function _ZN58MainFunctionalityTest_detect_feature_FetchFeatureList_TestC2Ev called 1 returned 100% blocks executed 100%
1:  440:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureList)
call    0 returned 1
------------------
_ZN58MainFunctionalityTest_detect_feature_FetchFeatureList_TestD0Ev:
function _ZN58MainFunctionalityTest_detect_feature_FetchFeatureList_TestD0Ev called 1 returned 100% blocks executed 100%
1:  440:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureList)
call    0 returned 1
call    1 returned 1
------------------
_ZN58MainFunctionalityTest_detect_feature_FetchFeatureList_TestD2Ev:
function _ZN58MainFunctionalityTest_detect_feature_FetchFeatureList_TestD2Ev called 1 returned 100% blocks executed 100%
1:  440:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureList)
call    0 returned 1
------------------
_ZN58MainFunctionalityTest_detect_feature_FetchFeatureList_Test8TestBodyEv:
function _ZN58MainFunctionalityTest_detect_feature_FetchFeatureList_Test8TestBodyEv called 1 returned 100% blocks executed 39%
1:  440:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureList)
-:  441:{
1:  442:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  443:  std::string const feature_1 = "test-feature-1";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  444:  std::string const feature_2 = "test-feature-2";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  445:  std::string const expectedFeatureText_1 = feature_1 + "=true";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  446:  std::string const expectedFeatureText_2 = feature_2 + "=true";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2:  447:  std::string const expectedTextResult    = expectedFeatureText_1 + '\n' + expectedFeatureText_2 + '\n';
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
1:  448:  memset(arTestDirectoryContent, 0, sizeof(arTestDirectoryContent));
1:  449:  strcpy(arTestDirectoryContent[0].d_name, ".");
1:  450:  strcpy(arTestDirectoryContent[1].d_name, "..");
1:  451:  strcpy(arTestDirectoryContent[2].d_name, feature_1.c_str());
call    0 returned 1
1:  452:  strcpy(arTestDirectoryContent[3].d_name, feature_2.c_str());
call    0 returned 1
-:  453:
1:  454:  char szArg00[] = "test";
1:  455:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  456:  char * const arszArgs[]
-:  457:  {
-:  458:    szArg00,
-:  459:    szArg01,
1:  460:  };
1:  461:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  462:  this->stOptions.stCommonOptions.quiet = true;
1:  463:  this->stOptions.stCommonOptions.textOutput = true;
1:  464:  this->stOptions.pstSpecificOptions->listMode = true;
1:  465:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  466:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  467:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  468:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
1:  469:  this->stResources.pstSpecificResources->pfOpenDir = &OpenDirTest;
1:  470:  this->stResources.pstSpecificResources->pfReadDir = &ReadDirTest;
1:  471:  this->stResources.pstSpecificResources->pfCloseDir = &CloseDirTest;
-:  472:
1:  473:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  474:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
2*:  475:  EXPECT_STREQ(expectedTextResult.c_str(), testing::internal::GetCapturedStdout().c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
1*:  476:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  477:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
------------------
-:  478:
-:  479:
4:  480:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListJson)
-:  481:{
1:  482:  std::string const deviceFeatureTestPath = "/testpath";
1:  483:  std::string const feature_1 = "test-feature-1";
1:  484:  std::string const feature_2 = "test-feature-2";
2:  485:  std::string const expectedJsonResult    = "{\"features\":[\"" + feature_1 + "\",\"" + feature_2 + "\"]}";
1:  486:  memset(arTestDirectoryContent, 0, sizeof(arTestDirectoryContent));
1:  487:  strcpy(arTestDirectoryContent[0].d_name, ".");
1:  488:  strcpy(arTestDirectoryContent[1].d_name, "..");
1:  489:  strcpy(arTestDirectoryContent[2].d_name, feature_1.c_str());
1:  490:  strcpy(arTestDirectoryContent[3].d_name, feature_2.c_str());
-:  491:
1:  492:  char szArg00[] = "test";
1:  493:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  494:  char * const arszArgs[]
-:  495:  {
-:  496:    szArg00,
-:  497:    szArg01,
1:  498:  };
1:  499:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  500:  this->stOptions.stCommonOptions.quiet = true;
1:  501:  this->stOptions.stCommonOptions.jsonOutput = true;
1:  502:  this->stOptions.pstSpecificOptions->listMode = true;
1:  503:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
1:  504:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  505:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  506:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
1:  507:  this->stResources.pstSpecificResources->pfOpenDir = &OpenDirTest;
1:  508:  this->stResources.pstSpecificResources->pfReadDir = &ReadDirTest;
1:  509:  this->stResources.pstSpecificResources->pfCloseDir = &CloseDirTest;
-:  510:
1:  511:  testing::internal::CaptureStdout();
1:  512:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
1:  513:  std::string capturedOutput = testing::internal::GetCapturedStdout();
1:  514:  capturedOutput.erase(remove_if(capturedOutput.begin(), capturedOutput.end(), isspace), capturedOutput.end());
1*:  515:  EXPECT_STREQ(expectedJsonResult.c_str(), capturedOutput.c_str()); // Expected no ASSERT before GetCapturedStdout!
1*:  516:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
1:  517:}
------------------
_ZN62MainFunctionalityTest_detect_feature_FetchFeatureListJson_TestC2Ev:
function _ZN62MainFunctionalityTest_detect_feature_FetchFeatureListJson_TestC2Ev called 1 returned 100% blocks executed 100%
1:  480:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListJson)
call    0 returned 1
------------------
_ZN62MainFunctionalityTest_detect_feature_FetchFeatureListJson_TestD0Ev:
function _ZN62MainFunctionalityTest_detect_feature_FetchFeatureListJson_TestD0Ev called 1 returned 100% blocks executed 100%
1:  480:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListJson)
call    0 returned 1
call    1 returned 1
------------------
_ZN62MainFunctionalityTest_detect_feature_FetchFeatureListJson_TestD2Ev:
function _ZN62MainFunctionalityTest_detect_feature_FetchFeatureListJson_TestD2Ev called 1 returned 100% blocks executed 100%
1:  480:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListJson)
call    0 returned 1
------------------
_ZN62MainFunctionalityTest_detect_feature_FetchFeatureListJson_Test8TestBodyEv:
function _ZN62MainFunctionalityTest_detect_feature_FetchFeatureListJson_Test8TestBodyEv called 1 returned 100% blocks executed 41%
1:  480:TEST_F(MainFunctionalityTest_detect_feature, FetchFeatureListJson)
-:  481:{
1:  482:  std::string const deviceFeatureTestPath = "/testpath";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  483:  std::string const feature_1 = "test-feature-1";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
1:  484:  std::string const feature_2 = "test-feature-2";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
2:  485:  std::string const expectedJsonResult    = "{\"features\":[\"" + feature_1 + "\",\"" + feature_2 + "\"]}";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
1:  486:  memset(arTestDirectoryContent, 0, sizeof(arTestDirectoryContent));
1:  487:  strcpy(arTestDirectoryContent[0].d_name, ".");
1:  488:  strcpy(arTestDirectoryContent[1].d_name, "..");
1:  489:  strcpy(arTestDirectoryContent[2].d_name, feature_1.c_str());
call    0 returned 1
1:  490:  strcpy(arTestDirectoryContent[3].d_name, feature_2.c_str());
call    0 returned 1
-:  491:
1:  492:  char szArg00[] = "test";
1:  493:  char szArg01[] = "plainOptionShouldBeIgnored";
-:  494:  char * const arszArgs[]
-:  495:  {
-:  496:    szArg00,
-:  497:    szArg01,
1:  498:  };
1:  499:  int const argCount = sizeof(arszArgs) / sizeof(char *);
1:  500:  this->stOptions.stCommonOptions.quiet = true;
1:  501:  this->stOptions.stCommonOptions.jsonOutput = true;
1:  502:  this->stOptions.pstSpecificOptions->listMode = true;
1:  503:  this->stResources.pstSpecificResources->szDeviceFeaturePath = deviceFeatureTestPath.c_str();
call    0 returned 1
1:  504:  this->stResources.pstSpecificResources->pfResolveRealPath = &ResolveRealPathDummy;
1:  505:  this->stResources.pstSpecificResources->pfIsFileAvailable = &IsFileAvailableTrue;
1:  506:  this->stResources.pstSpecificResources->pfIsDependencyComplete = &IsDependencyCompleteTrue;
1:  507:  this->stResources.pstSpecificResources->pfOpenDir = &OpenDirTest;
1:  508:  this->stResources.pstSpecificResources->pfReadDir = &ReadDirTest;
1:  509:  this->stResources.pstSpecificResources->pfCloseDir = &CloseDirTest;
-:  510:
1:  511:  testing::internal::CaptureStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  512:  exitCode_t const result = ctparts_ctMain(argCount, arszArgs, &(this->stOptions), &(this->stResources));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  513:  std::string capturedOutput = testing::internal::GetCapturedStdout();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:  514:  capturedOutput.erase(remove_if(capturedOutput.begin(), capturedOutput.end(), isspace), capturedOutput.end());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
1*:  515:  EXPECT_STREQ(expectedJsonResult.c_str(), capturedOutput.c_str()); // Expected no ASSERT before GetCapturedStdout!
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 returned 1
call   21 never executed
call   22 never executed
call   23 never executed
1*:  516:  EXPECT_EQ(CTUTIL_EXIT_SUCCESS, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
call   19 never executed
call   20 never executed
call   21 never executed
1:  517:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
------------------
-:  518:
-:  519:
-:  520://---- End of source file ------------------------------------------------------
