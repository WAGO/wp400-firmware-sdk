-:    0:Source:src/libconfigtoolutils/json.c
-:    1://------------------------------------------------------------------------------
-:    2:// This Source Code Form is subject to the terms of the Mozilla Public
-:    3:// License, v. 2.0. If a copy of the MPL was not distributed with this
-:    4:// file, You can obtain one at http://mozilla.org/MPL/2.0/.
-:    5://
-:    6:// This file is part of project modular-config-tools (PTXdist package modular-config-tools).
-:    7://
-:    8:// Copyright (c) 2017-2022 WAGO GmbH & Co. KG
-:    9://------------------------------------------------------------------------------
-:   10://------------------------------------------------------------------------------
-:   11:///  \file     json.c
-:   12:///
-:   13:///  \brief    JSON format tools.
-:   14:///            TODO: Check if there is a library providing this JSON stuff.
-:   15:///
-:   16:///  \author   PEn: WAGO GmbH & Co. KG
-:   17://------------------------------------------------------------------------------
-:   18:
-:   19://------------------------------------------------------------------------------
-:   20:// include files
-:   21://------------------------------------------------------------------------------
-:   22:#include "ctutil/json.h"
-:   23:#include "wc/assertion.h"
-:   24:#include <string.h>
-:   25:#include <stdio.h>
-:   26:
-:   27:#include <inttypes.h>
-:   28:
-:   29://------------------------------------------------------------------------------
-:   30:// defines; structure, enumeration and type definitions
-:   31://------------------------------------------------------------------------------
-:   32:
-:   33://------------------------------------------------------------------------------
-:   34:// function prototypes
-:   35://------------------------------------------------------------------------------
-:   36:
-:   37://------------------------------------------------------------------------------
-:   38:// macros
-:   39://------------------------------------------------------------------------------
-:   40:
-:   41://------------------------------------------------------------------------------
-:   42:// variables' and constants' definitions
-:   43://------------------------------------------------------------------------------
-:   44:
-:   45://------------------------------------------------------------------------------
-:   46:// function implementation
-:   47://------------------------------------------------------------------------------
function GetEscapeCharacter called 52 returned 100% blocks executed 86%
52:   48:static char GetEscapeCharacter(char const character)
-:   49:{
52:   50:  char result = '\0';
52:   51:  char const mapEscapeChars[][2] =
-:   52:  {
-:   53:    {'"', '"'},
-:   54:    {'\b', 'b'},
-:   55:    {'\f', 'f'},
-:   56:    {'\n', 'n'},
-:   57:    {'\r', 'r'},
-:   58:    {'\t', 't'},
-:   59:    {'\\', '\\'},
-:   60:    {'/', '/'}
-:   61:  };
468:   62:  for(size_t i = 0U; i < (sizeof(mapEscapeChars) / 2); i++)
branch  0 taken 416
branch  1 taken 52 (fallthrough)
-:   63:  {
416:   64:    if(character == mapEscapeChars[i][0])
branch  0 taken 0 (fallthrough)
branch  1 taken 416
-:   65:    {
#####:   66:      result = mapEscapeChars[i][1];
#####:   67:      break;
-:   68:    }
-:   69:  }
-:   70:
52:   71:  return result;
-:   72:}
-:   73:
-:   74:
function WriteStringValue called 2 returned 100% blocks executed 70%
2:   75:static statusCode_t WriteStringValue(char * const szObjectString,
-:   76:                                     char const * const szValue,
-:   77:                                     size_t const valueLength,
-:   78:                                     size_t const freeBufferSize,
-:   79:                                     size_t * const pAddedCharacters)
-:   80:{
2:   81:  statusCode_t status = CTUTIL_SUCCESS;
-:   82:
2:   83:  char * szObjectStringPos = szObjectString;
2:   84:  *pAddedCharacters = 0;
-:   85:
-:   86:  // Value string may contain characters invalid as JSON string
-:   87:  char szFixEscapeBuffer[128];
2:   88:  char * szEscapedValue = szFixEscapeBuffer;
2:   89:  size_t escapeBufferSize = sizeof(szFixEscapeBuffer);
2:   90:  size_t const worstCaseSize = (valueLength * 2) + 1;
2:   91:  if(escapeBufferSize <= worstCaseSize)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:   92:  {
-:   93:    // Fixed size buffer maybe not long enough, allocate memory for worst case
#####:   94:    szEscapedValue = malloc(worstCaseSize);
#####:   95:    escapeBufferSize = worstCaseSize;
-:   96:  }
2:   97:  ctutil_EscapeJsonStringValue(szEscapedValue, escapeBufferSize, szValue, NULL);
call    0 returned 2
2:   98:  size_t const escapedValueLength = strlen(szEscapedValue);
2:   99:  if((escapedValueLength + 2) >= freeBufferSize)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  100:  {
#####:  101:    status = CTUTIL_FAILED;
-:  102:  }
-:  103:  else
-:  104:  {
2:  105:    szObjectStringPos[0] = '"';
2:  106:    strncpy(&(szObjectStringPos[1]), szEscapedValue, escapedValueLength);
2:  107:    szObjectStringPos[1 + escapedValueLength] = '"';
2:  108:    size_t const addedCharacters = 1 + escapedValueLength + 1;
2:  109:    szObjectStringPos  += addedCharacters;
2:  110:    *pAddedCharacters  += addedCharacters;
2:  111:    if(szEscapedValue != szFixEscapeBuffer)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  112:    {
#####:  113:      free(szEscapedValue);
-:  114:    }
-:  115:
-:  116:    // Write terminator
2:  117:    szObjectStringPos[0] = '\0';
-:  118:  }
-:  119:
2:  120:    return status;
-:  121:}
-:  122:
-:  123:
function ctutil_EscapeJsonStringValue called 4 returned 100% blocks executed 92%
4:  124:void ctutil_EscapeJsonStringValue(char * const szDestination,
-:  125:                                  size_t const freeBufferSize,
-:  126:                                  char const * const szSource,
-:  127:                                  size_t * const pWrittenCharacters)
-:  128:{
4:  129:  size_t readCharacters = 0;
4:  130:  size_t writtenCharacters = 0;
56:  131:  while((szSource[readCharacters] != '\0') && (writtenCharacters < (freeBufferSize - 1U)))
branch  0 taken 52 (fallthrough)
branch  1 taken 4
branch  2 taken 52
branch  3 taken 0 (fallthrough)
-:  132:  {
52:  133:    char const escapeCharacter = GetEscapeCharacter(szSource[readCharacters]);
call    0 returned 52
52:  134:    if(escapeCharacter == '\0')
branch  0 taken 52 (fallthrough)
branch  1 taken 0
-:  135:    {
52:  136:      szDestination[writtenCharacters] = szSource[readCharacters];
52:  137:      ++writtenCharacters;
-:  138:    }
-:  139:    else
-:  140:    {
#####:  141:      szDestination[writtenCharacters] = '\\';
#####:  142:      ++writtenCharacters;
#####:  143:      szDestination[writtenCharacters] = escapeCharacter;
#####:  144:      ++writtenCharacters;
-:  145:    }
52:  146:    ++readCharacters;
-:  147:  }
4:  148:  szDestination[writtenCharacters] = '\0';
-:  149:
-:  150:  // Return output variables
4:  151:  if(pWrittenCharacters != NULL)
branch  0 taken 2 (fallthrough)
branch  1 taken 2
-:  152:  {
2:  153:   *pWrittenCharacters = writtenCharacters;
-:  154:  }
-:  155:
4:  156:  return;
-:  157:}
-:  158:
-:  159:
function ctutil_JsonObjectStringOpen called 2 returned 100% blocks executed 80%
2:  160:statusCode_t ctutil_JsonObjectStringOpen(char * const szObjectString,
-:  161:                                         size_t const freeBufferSize,
-:  162:                                         size_t * const pAddedCharacters)
-:  163:{
2:  164:  statusCode_t status = CTUTIL_SUCCESS;
-:  165:
2:  166:  if(freeBufferSize < 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  167:  {
#####:  168:    status = CTUTIL_FAILED;
-:  169:  }
-:  170:  else
-:  171:  {
2:  172:    szObjectString[0] = '{';
2:  173:    szObjectString[1] = '\0';
2:  174:    *pAddedCharacters = 1;
-:  175:  }
-:  176:
2:  177:  return status;
-:  178:}
-:  179:
-:  180:
function ctutil_JsonObjectStringClose called 2 returned 100% blocks executed 80%
2:  181:statusCode_t ctutil_JsonObjectStringClose(char * const szObjectString,
-:  182:                                          size_t const freeBufferSize,
-:  183:                                          size_t * const pAddedCharacters)
-:  184:{
2:  185:  statusCode_t status = CTUTIL_SUCCESS;
-:  186:
2:  187:  if(freeBufferSize < 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  188:  {
#####:  189:    status = CTUTIL_FAILED;
-:  190:  }
-:  191:  else
-:  192:  {
2:  193:    szObjectString[0] = '}';
2:  194:    szObjectString[1] = '\0';
2:  195:    *pAddedCharacters = 1;
-:  196:  }
-:  197:
2:  198:  return status;
-:  199:}
-:  200:
-:  201:
function ctutil_JsonObjectStringWriteMemberSeparator called 0 returned 0% blocks executed 0%
#####:  202:statusCode_t ctutil_JsonObjectStringWriteMemberSeparator(char * const szObjectString,
-:  203:                                                         size_t const freeBufferSize,
-:  204:                                                         size_t * const pAddedCharacters)
-:  205:{
#####:  206:  statusCode_t status = CTUTIL_SUCCESS;
-:  207:
#####:  208:  if(freeBufferSize < 2)
branch  0 never executed
branch  1 never executed
-:  209:  {
#####:  210:    status = CTUTIL_FAILED;
-:  211:  }
-:  212:  else
-:  213:  {
#####:  214:    szObjectString[0] = ',';
#####:  215:    szObjectString[1] = '\0';
#####:  216:    *pAddedCharacters = 1;
-:  217:  }
-:  218:
#####:  219:  return status;
-:  220:}
-:  221:
-:  222:
function ctutil_JsonObjectStringWriteNameValueSeparator called 2 returned 100% blocks executed 80%
2:  223:statusCode_t ctutil_JsonObjectStringWriteNameValueSeparator(char * const szObjectString,
-:  224:                                                            size_t const freeBufferSize,
-:  225:                                                            size_t * const pAddedCharacters)
-:  226:{
2:  227:  statusCode_t status = CTUTIL_SUCCESS;
-:  228:
2:  229:  if(freeBufferSize < 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  230:  {
#####:  231:    status = CTUTIL_FAILED;
-:  232:  }
-:  233:  else
-:  234:  {
2:  235:    szObjectString[0] = ':';
2:  236:    szObjectString[1] = ' ';
2:  237:    szObjectString[2] = '\0';
2:  238:    *pAddedCharacters = 2;
-:  239:  }
-:  240:
2:  241:  return status;
-:  242:}
-:  243:
-:  244:
function ctutil_JsonObjectStringWriteName called 2 returned 100% blocks executed 70%
2:  245:statusCode_t ctutil_JsonObjectStringWriteName(char * const szObjectString,
-:  246:                                              char const * const szName,
-:  247:                                              size_t const freeBufferSize,
-:  248:                                              size_t * const pAddedCharacters)
-:  249:{
2:  250:  statusCode_t status = CTUTIL_SUCCESS;
-:  251:
-:  252:  char szFixSizeBuffer[256];
2:  253:  char * szEscapedName = szFixSizeBuffer;
2:  254:  size_t escapeBufferSize = sizeof(szFixSizeBuffer);
2:  255:  size_t const worstCaseBufferSize = (strlen(szName) * 2) + 1;
2:  256:  if(worstCaseBufferSize > escapeBufferSize)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  257:  {
-:  258:    // Fixed size buffer maybe not long enough, allocate memory for worst case
#####:  259:    szEscapedName = malloc(worstCaseBufferSize);
#####:  260:    escapeBufferSize = worstCaseBufferSize;
-:  261:  }
2:  262:  size_t escapedNameLength = 0;
2:  263:  ctutil_EscapeJsonStringValue(szEscapedName, escapeBufferSize, szName, &escapedNameLength);
call    0 returned 2
2:  264:  if(freeBufferSize < (escapedNameLength + 3))
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  265:  {
#####:  266:    status = CTUTIL_FAILED;
-:  267:  }
-:  268:  else
-:  269:  {
2:  270:    szObjectString[0] = '"';
2:  271:    strncpy(&(szObjectString[1]), szEscapedName, escapedNameLength);
2:  272:    szObjectString[1 + escapedNameLength] = '"';
2:  273:    szObjectString[2 + escapedNameLength] = '\0';
2:  274:    *pAddedCharacters = 2 + escapedNameLength;
-:  275:  }
2:  276:  if(szEscapedName != szFixSizeBuffer)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  277:  {
#####:  278:    free(szEscapedName);
-:  279:  }
-:  280:
2:  281:  return status;
-:  282:}
-:  283:
-:  284:
function ctutil_JsonObjectStringWriteStringValue called 0 returned 0% blocks executed 0%
#####:  285:statusCode_t ctutil_JsonObjectStringWriteStringValue(char * const szObjectString,
-:  286:                                                     char const * const szName,
-:  287:                                                     char const * const szValue,
-:  288:                                                     size_t const freeBufferSize,
-:  289:                                                     size_t * const pAddedCharacters)
-:  290:{
#####:  291:  statusCode_t status = CTUTIL_SUCCESS;
-:  292:
#####:  293:  size_t const nameLength = strlen(szName);
#####:  294:  size_t const valueLength = strlen(szValue);
-:  295:  // Checks only minimum needed buffer space
-:  296:  //                   "   name         "   :   _   "   value         "  \0
#####:  297:  if(freeBufferSize < (1 + nameLength + 1 + 1 + 1 + 1 + valueLength + 1 + 1))
branch  0 never executed
branch  1 never executed
-:  298:  {
#####:  299:    status = CTUTIL_FAILED;
-:  300:  }
-:  301:  else
-:  302:  {
#####:  303:    size_t freeBufferSizeLeft = freeBufferSize;
#####:  304:    char * szObjectStringPos = szObjectString;
#####:  305:    *pAddedCharacters = 0;
-:  306:
-:  307:    // Write name
-:  308:    {
#####:  309:      size_t addedCharacters = 0;
#####:  310:      status = ctutil_JsonObjectStringWriteName(szObjectStringPos, szName, freeBufferSizeLeft, &addedCharacters);
call    0 never executed
#####:  311:      if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  312:      {
#####:  313:        freeBufferSizeLeft -= addedCharacters;
#####:  314:        szObjectStringPos  += addedCharacters;
#####:  315:        *pAddedCharacters  += addedCharacters;
-:  316:      }
-:  317:    }
-:  318:
-:  319:    // Write separator
#####:  320:    if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  321:    {
#####:  322:      size_t addedCharacters = 0;
#####:  323:      status = ctutil_JsonObjectStringWriteNameValueSeparator(szObjectStringPos, freeBufferSizeLeft, &addedCharacters);
call    0 never executed
#####:  324:      if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  325:      {
#####:  326:        freeBufferSizeLeft -= addedCharacters;
#####:  327:        szObjectStringPos  += addedCharacters;
#####:  328:        *pAddedCharacters  += addedCharacters;
-:  329:      }
-:  330:    }
-:  331:
-:  332:    // Write string value
#####:  333:    if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  334:    {
#####:  335:      size_t addedCharacters = 0;
#####:  336:      status = WriteStringValue(szObjectStringPos, szValue, valueLength, freeBufferSizeLeft, &addedCharacters);
call    0 never executed
#####:  337:      if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  338:      {
#####:  339:        freeBufferSizeLeft -= addedCharacters;
#####:  340:        szObjectStringPos  += addedCharacters;
#####:  341:        *pAddedCharacters  += addedCharacters;
-:  342:      }
-:  343:    }
-:  344:
-:  345:    // Write terminator
#####:  346:    szObjectStringPos[0] = '\0';
-:  347:  }
-:  348:
#####:  349:  return status;
-:  350:}
-:  351:
-:  352:
function ctutil_JsonObjectStringWriteBoolValue called 1 returned 100% blocks executed 88%
1:  353:statusCode_t ctutil_JsonObjectStringWriteBoolValue(char * const szObjectString,
-:  354:                                                   char const * const szName,
-:  355:                                                   bool const value,
-:  356:                                                   size_t const freeBufferSize,
-:  357:                                                   size_t * const pAddedCharacters)
-:  358:{
1:  359:  statusCode_t status = CTUTIL_SUCCESS;
-:  360:
1:  361:  size_t const nameLength = strlen(szName);
-:  362:  // Checks only minimum needed buffer space
-:  363:  //                   "   name         "   :   _   value  \0
1:  364:  if(freeBufferSize < (1 + nameLength + 1 + 1 + 1 + 4     + 1))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
-:  365:  {
#####:  366:    status = CTUTIL_FAILED;
-:  367:  }
-:  368:  else
-:  369:  {
1:  370:    size_t freeBufferSizeLeft = freeBufferSize;
1:  371:    char * szObjectStringPos = szObjectString;
1:  372:    *pAddedCharacters = 0;
-:  373:
-:  374:    // Write name
-:  375:    {
1:  376:      size_t addedCharacters = 0;
1:  377:      status = ctutil_JsonObjectStringWriteName(szObjectStringPos, szName, freeBufferSizeLeft, &addedCharacters);
call    0 returned 1
1:  378:      if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  379:      {
1:  380:        freeBufferSizeLeft -= addedCharacters;
1:  381:        szObjectStringPos  += addedCharacters;
1:  382:        *pAddedCharacters  += addedCharacters;
-:  383:      }
-:  384:    }
-:  385:
-:  386:    // Write separator
1:  387:    if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  388:    {
1:  389:      size_t addedCharacters = 0;
1:  390:      status = ctutil_JsonObjectStringWriteNameValueSeparator(szObjectStringPos, freeBufferSizeLeft, &addedCharacters);
call    0 returned 1
1:  391:      if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  392:      {
1:  393:        freeBufferSizeLeft -= addedCharacters;
1:  394:        szObjectStringPos  += addedCharacters;
1:  395:        *pAddedCharacters  += addedCharacters;
-:  396:      }
-:  397:    }
-:  398:
-:  399:    // Write value
1:  400:    if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  401:    {
1*:  402:      char const * const szWriteValue = value ? "true" : "false";
branch  0 taken 1 (fallthrough)
branch  1 taken 0
1:  403:      int const printResult = snprintf(szObjectStringPos, freeBufferSizeLeft, "%s", szWriteValue);
1:  404:      if(    (printResult < 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
1:  405:          || (((size_t)printResult) >= freeBufferSizeLeft))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
-:  406:      {
#####:  407:        status = CTUTIL_FAILED;
#####:  408:        *pAddedCharacters = 0;
#####:  409:        szObjectString[0] = '\0';
-:  410:      }
-:  411:      else
-:  412:      {
-:  413:        WC_STATIC_ASSERT(SIZE_MAX >= INT_MAX);
1:  414:        size_t const addedCharacters = (size_t)printResult;
1:  415:        freeBufferSizeLeft -= addedCharacters;
1:  416:        szObjectStringPos  += addedCharacters;
1:  417:        *pAddedCharacters  += addedCharacters;
-:  418:      }
-:  419:    }
-:  420:
-:  421:    // Write terminator
1:  422:    szObjectStringPos[0] = '\0';
-:  423:  }
-:  424:
1:  425:  return status;
-:  426:}
-:  427:
-:  428:
function ctutil_JsonObjectStringWriteSizeValue called 0 returned 0% blocks executed 0%
#####:  429:statusCode_t ctutil_JsonObjectStringWriteSizeValue(char * const szObjectString,
-:  430:                                                   char const * const szName,
-:  431:                                                   size_t const value,
-:  432:                                                   size_t const freeBufferSize,
-:  433:                                                   size_t * const pAddedCharacters)
-:  434:{
#####:  435:  statusCode_t status = CTUTIL_SUCCESS;
-:  436:
#####:  437:  size_t const nameLength = strlen(szName);
-:  438:  // Checks only minimum needed buffer space
-:  439:  //                   "   name         "   :   _   value  \0
#####:  440:  if(freeBufferSize < (1 + nameLength + 1 + 1 + 1 + 1     + 1))
branch  0 never executed
branch  1 never executed
-:  441:  {
#####:  442:    status = CTUTIL_FAILED;
-:  443:  }
-:  444:  else
-:  445:  {
#####:  446:    size_t freeBufferSizeLeft = freeBufferSize;
#####:  447:    char * szObjectStringPos = szObjectString;
#####:  448:    *pAddedCharacters = 0;
-:  449:
-:  450:    // Write name
-:  451:    {
#####:  452:      size_t addedCharacters = 0;
#####:  453:      status = ctutil_JsonObjectStringWriteName(szObjectStringPos, szName, freeBufferSizeLeft, &addedCharacters);
call    0 never executed
#####:  454:      if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  455:      {
#####:  456:        freeBufferSizeLeft -= addedCharacters;
#####:  457:        szObjectStringPos  += addedCharacters;
#####:  458:        *pAddedCharacters  += addedCharacters;
-:  459:      }
-:  460:    }
-:  461:
-:  462:    // Write separator
#####:  463:    if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  464:    {
#####:  465:      size_t addedCharacters = 0;
#####:  466:      status = ctutil_JsonObjectStringWriteNameValueSeparator(szObjectStringPos, freeBufferSizeLeft, &addedCharacters);
call    0 never executed
#####:  467:      if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  468:      {
#####:  469:        freeBufferSizeLeft -= addedCharacters;
#####:  470:        szObjectStringPos  += addedCharacters;
#####:  471:        *pAddedCharacters  += addedCharacters;
-:  472:      }
-:  473:    }
-:  474:
-:  475:    // Write value
#####:  476:    if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  477:    {
#####:  478:      int const printResult = snprintf(szObjectStringPos, freeBufferSizeLeft, "%u", value);
#####:  479:      if(    (printResult < 0)
branch  0 never executed
branch  1 never executed
#####:  480:          || (((size_t)printResult) >= freeBufferSizeLeft))
branch  0 never executed
branch  1 never executed
-:  481:      {
#####:  482:        status = CTUTIL_FAILED;
#####:  483:        *pAddedCharacters = 0;
#####:  484:        szObjectString[0] = '\0';
-:  485:      }
-:  486:      else
-:  487:      {
-:  488:        WC_STATIC_ASSERT(SIZE_MAX >= INT_MAX);
#####:  489:        size_t const addedCharacters = (size_t)printResult;
#####:  490:        freeBufferSizeLeft -= addedCharacters;
#####:  491:        szObjectStringPos  += addedCharacters;
#####:  492:        *pAddedCharacters  += addedCharacters;
-:  493:      }
-:  494:    }
-:  495:
-:  496:    // Write terminator
#####:  497:    szObjectStringPos[0] = '\0';
-:  498:  }
-:  499:
#####:  500:  return status;
-:  501:}
-:  502:
-:  503:
function ctutil_JsonObjectStringWriteUInt64Value called 0 returned 0% blocks executed 0%
#####:  504:statusCode_t ctutil_JsonObjectStringWriteUInt64Value(char * const szObjectString,
-:  505:                                                     char const * const szName,
-:  506:                                                     uint64_t const value,
-:  507:                                                     size_t const freeBufferSize,
-:  508:                                                     size_t * const pAddedCharacters)
-:  509:{
#####:  510:  statusCode_t status = CTUTIL_SUCCESS;
-:  511:
#####:  512:  size_t const nameLength = strlen(szName);
-:  513:  // Checks only minimum needed buffer space
-:  514:  //                   "   name         "   :   _   value  \0
#####:  515:  if(freeBufferSize < (1 + nameLength + 1 + 1 + 1 + 1     + 1))
branch  0 never executed
branch  1 never executed
-:  516:  {
#####:  517:    status = CTUTIL_FAILED;
-:  518:  }
-:  519:  else
-:  520:  {
#####:  521:    size_t freeBufferSizeLeft = freeBufferSize;
#####:  522:    char * szObjectStringPos = szObjectString;
#####:  523:    *pAddedCharacters = 0;
-:  524:
-:  525:    // Write name
-:  526:    {
#####:  527:      size_t addedCharacters = 0;
#####:  528:      status = ctutil_JsonObjectStringWriteName(szObjectStringPos, szName, freeBufferSizeLeft, &addedCharacters);
call    0 never executed
#####:  529:      if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  530:      {
#####:  531:        freeBufferSizeLeft -= addedCharacters;
#####:  532:        szObjectStringPos  += addedCharacters;
#####:  533:        *pAddedCharacters  += addedCharacters;
-:  534:      }
-:  535:    }
-:  536:
-:  537:    // Write separator
#####:  538:    if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  539:    {
#####:  540:      size_t addedCharacters = 0;
#####:  541:      status = ctutil_JsonObjectStringWriteNameValueSeparator(szObjectStringPos, freeBufferSizeLeft, &addedCharacters);
call    0 never executed
#####:  542:      if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  543:      {
#####:  544:        freeBufferSizeLeft -= addedCharacters;
#####:  545:        szObjectStringPos  += addedCharacters;
#####:  546:        *pAddedCharacters  += addedCharacters;
-:  547:      }
-:  548:    }
-:  549:
-:  550:    // Write value
#####:  551:    if(ctutil_IsStatusOk(status))
call    0 never executed
branch  1 never executed
branch  2 never executed
-:  552:    {
#####:  553:      int const printResult = snprintf(szObjectStringPos, freeBufferSizeLeft, "%" PRIu64, value);
#####:  554:      if(    (printResult < 0)
branch  0 never executed
branch  1 never executed
#####:  555:          || (((size_t)printResult) >= freeBufferSizeLeft))
branch  0 never executed
branch  1 never executed
-:  556:      {
#####:  557:        status = CTUTIL_FAILED;
#####:  558:        *pAddedCharacters = 0;
#####:  559:        szObjectString[0] = '\0';
-:  560:      }
-:  561:      else
-:  562:      {
-:  563:        WC_STATIC_ASSERT(SIZE_MAX >= INT_MAX);
#####:  564:        size_t const addedCharacters = (size_t)printResult;
#####:  565:        freeBufferSizeLeft -= addedCharacters;
#####:  566:        szObjectStringPos  += addedCharacters;
#####:  567:        *pAddedCharacters  += addedCharacters;
-:  568:      }
-:  569:    }
-:  570:
-:  571:    // Write terminator
#####:  572:    szObjectStringPos[0] = '\0';
-:  573:  }
-:  574:
#####:  575:  return status;
-:  576:}
-:  577:
-:  578:
function ctutil_JsonObjectStringWriteArrayStart called 1 returned 100% blocks executed 95%
1:  579:statusCode_t ctutil_JsonObjectStringWriteArrayStart(char * const szObjectString,
-:  580:                                                    char const * const szName,
-:  581:                                                    size_t const freeBufferSize,
-:  582:                                                    size_t * const pAddedCharacters)
-:  583:{
1:  584:  statusCode_t status = CTUTIL_SUCCESS;
-:  585:
1:  586:  size_t const nameLength = strlen(szName);
-:  587:  // Checks only minimum needed buffer space
-:  588:  //                   "   name         "   :   _   [   _  \0
1:  589:  if(freeBufferSize < (1 + nameLength + 1 + 1 + 1 + 1 + 1 + 1))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
-:  590:  {
#####:  591:    status = CTUTIL_FAILED;
-:  592:  }
-:  593:  else
-:  594:  {
1:  595:    size_t freeBufferSizeLeft = freeBufferSize;
1:  596:    char * szObjectStringPos = szObjectString;
1:  597:    *pAddedCharacters = 0;
-:  598:
-:  599:    // Write name
-:  600:    {
1:  601:      size_t addedCharacters = 0;
1:  602:      status = ctutil_JsonObjectStringWriteName(szObjectStringPos, szName, freeBufferSizeLeft, &addedCharacters);
call    0 returned 1
1:  603:      if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  604:      {
1:  605:        freeBufferSizeLeft -= addedCharacters;
1:  606:        szObjectStringPos  += addedCharacters;
1:  607:        *pAddedCharacters  += addedCharacters;
-:  608:      }
-:  609:    }
-:  610:
-:  611:    // Write separator
1:  612:    if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  613:    {
1:  614:      size_t addedCharacters = 0;
1:  615:      status = ctutil_JsonObjectStringWriteNameValueSeparator(szObjectStringPos, freeBufferSizeLeft, &addedCharacters);
call    0 returned 1
1:  616:      if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  617:      {
1:  618:        freeBufferSizeLeft -= addedCharacters;
1:  619:        szObjectStringPos  += addedCharacters;
1:  620:        *pAddedCharacters  += addedCharacters;
-:  621:      }
-:  622:    }
-:  623:
-:  624:    // Write array start
1:  625:    if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  626:    {
1:  627:      szObjectStringPos[0] = '[';
1:  628:      szObjectStringPos[1] = ' ';
1:  629:      szObjectStringPos[2] = '\0';
1:  630:      size_t const addedCharacters = 2;
1:  631:      freeBufferSizeLeft -= addedCharacters;
1:  632:      szObjectStringPos  += addedCharacters;
1:  633:      *pAddedCharacters  += addedCharacters;
-:  634:    }
-:  635:
-:  636:    // Write terminator
1:  637:    szObjectStringPos[0] = '\0';
-:  638:  }
-:  639:
1:  640:    return status;
-:  641:}
-:  642:
-:  643:
function ctutil_JsonObjectStringWriteArrayEnd called 1 returned 100% blocks executed 80%
1:  644:statusCode_t ctutil_JsonObjectStringWriteArrayEnd(char * const szObjectString,
-:  645:                                                  size_t const freeBufferSize,
-:  646:                                                  size_t * const pAddedCharacters)
-:  647:{
1:  648:  statusCode_t status = CTUTIL_SUCCESS;
-:  649:
1:  650:  if(freeBufferSize < 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
-:  651:  {
#####:  652:    status = CTUTIL_FAILED;
-:  653:  }
-:  654:  else
-:  655:  {
1:  656:    *pAddedCharacters = 0;
1:  657:    szObjectString[0] = ' ';
1:  658:    szObjectString[1] = ']';
1:  659:    szObjectString[2] = '\0';
1:  660:    size_t const addedCharacters = 2;
1:  661:    *pAddedCharacters += addedCharacters;
-:  662:  }
-:  663:
1:  664:    return status;
-:  665:}
-:  666:
-:  667:
function ctutil_JsonObjectStringWriteArrayStringValue called 2 returned 100% blocks executed 94%
2:  668:statusCode_t ctutil_JsonObjectStringWriteArrayStringValue(char * const szObjectString,
-:  669:                                                          char const * const szValue,
-:  670:                                                          size_t const freeBufferSize,
-:  671:                                                          size_t * const pAddedCharacters)
-:  672:{
2:  673:    statusCode_t status = CTUTIL_SUCCESS;
-:  674:
2:  675:    size_t const valueLength = strlen(szValue);
-:  676:    // Checks only minimum needed buffer space
-:  677:    //                   ,   _   "   value         "  \0
2:  678:    if(freeBufferSize < (1 + 1 + 1 + valueLength + 1 + 1))
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  679:    {
#####:  680:      status = CTUTIL_FAILED;
-:  681:    }
-:  682:    else
-:  683:    {
2:  684:      size_t freeBufferSizeLeft = freeBufferSize;
2:  685:      char * szObjectStringPos = szObjectString;
2:  686:      *pAddedCharacters = 0;
-:  687:
-:  688:      // Write separator if not first value
2:  689:      if(ctutil_IsStatusOk(status) && (szObjectStringPos[-1] != ' '))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
branch  3 taken 1 (fallthrough)
branch  4 taken 1
-:  690:      {
1:  691:          szObjectStringPos[0] = ',';
1:  692:          szObjectStringPos[1] = ' ';
1:  693:          szObjectStringPos[2] = '\0';
1:  694:          size_t const addedCharacters = 2;
1:  695:          freeBufferSizeLeft -= addedCharacters;
1:  696:          szObjectStringPos  += addedCharacters;
1:  697:          *pAddedCharacters  += addedCharacters;
-:  698:      }
-:  699:
-:  700:      // Write string value
2:  701:      if(ctutil_IsStatusOk(status))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
-:  702:      {
2:  703:        size_t addedCharacters = 0;
2:  704:        status = WriteStringValue(szObjectStringPos, szValue, valueLength, freeBufferSizeLeft, &addedCharacters);
call    0 returned 2
2:  705:        if(ctutil_IsStatusOk(status))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
-:  706:        {
2:  707:          freeBufferSizeLeft -= addedCharacters;
2:  708:          szObjectStringPos  += addedCharacters;
2:  709:          *pAddedCharacters  += addedCharacters;
-:  710:        }
-:  711:      }
-:  712:
-:  713:      // Write terminator
2:  714:      szObjectStringPos[0] = '\0';
-:  715:    }
-:  716:
2:  717:    return status;
-:  718:}
-:  719:
-:  720:
-:  721://---- End of source file ------------------------------------------------------
-:  722:
