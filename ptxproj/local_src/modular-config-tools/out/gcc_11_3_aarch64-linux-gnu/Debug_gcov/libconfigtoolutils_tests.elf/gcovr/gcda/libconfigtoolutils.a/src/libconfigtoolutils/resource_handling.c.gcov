-:    0:Source:src/libconfigtoolutils/resource_handling.c
-:    1://------------------------------------------------------------------------------
-:    2:// This Source Code Form is subject to the terms of the Mozilla Public
-:    3:// License, v. 2.0. If a copy of the MPL was not distributed with this
-:    4:// file, You can obtain one at http://mozilla.org/MPL/2.0/.
-:    5://
-:    6:// This file is part of project modular-config-tools (PTXdist package modular-config-tools).
-:    7://
-:    8:// Copyright (c) 2017-2022 WAGO GmbH & Co. KG
-:    9://------------------------------------------------------------------------------
-:   10://------------------------------------------------------------------------------
-:   11:///  \file     resource_handling.c
-:   12:///
-:   13:///  \brief    Helper functions for config tool resource handling.
-:   14:///
-:   15:///  \author   PEn: WAGO GmbH & Co. KG
-:   16://------------------------------------------------------------------------------
-:   17:
-:   18://------------------------------------------------------------------------------
-:   19:// include files
-:   20://------------------------------------------------------------------------------
-:   21:#include "wc/structuring.h"
-:   22:#include "wc/assertion.h"
-:   23:#include "wc/std_includes.h"
-:   24:#include "ctutil/resource_handling.h"
-:   25:#include <string.h>
-:   26:#include <unistd.h>
-:   27:#include <sys/stat.h>
-:   28:
-:   29://------------------------------------------------------------------------------
-:   30:// defines; structure, enumeration and type definitions
-:   31://------------------------------------------------------------------------------
-:   32:
-:   33:struct ctutil_ChangeableFile
-:   34:{
-:   35:  char * szOriginalPath;
-:   36:  char * szWriteFilePath;
-:   37:};
-:   38:
-:   39://------------------------------------------------------------------------------
-:   40:// function prototypes
-:   41://------------------------------------------------------------------------------
-:   42:
-:   43://------------------------------------------------------------------------------
-:   44:// macros
-:   45://------------------------------------------------------------------------------
-:   46:
-:   47://------------------------------------------------------------------------------
-:   48:// variables' and constants' definitions
-:   49://------------------------------------------------------------------------------
-:   50:
-:   51://------------------------------------------------------------------------------
-:   52:// function implementation
-:   53://------------------------------------------------------------------------------
function ctutil_InitResources called 2 returned 100% blocks executed 100%
2:   54:void ctutil_InitResources(ctutil_Resources_t * const pstResources)
-:   55:{
2:   56:  memset(pstResources, 0, sizeof(*pstResources));
2:   57:}
-:   58:
-:   59:
function ctutil_OpenCommonResources called 3 returned 100% blocks executed 100%
3:   60:statusCode_t ctutil_OpenCommonResources(ctutil_ResourcesCommon_t * const pstResources)
-:   61:{
3:   62:  pstResources->szLastErrorFile = "/tmp/last_error.txt";
-:   63:
3:   64:  return CTUTIL_SUCCESS;
-:   65:}
-:   66:
-:   67:
function ctutil_ReleaseCommonResources called 3 returned 100% blocks executed 100%
3:   68:void ctutil_ReleaseCommonResources(ctutil_ResourcesCommon_t * const WC_UNUSED_PARAM(pstResources))
-:   69:{
-:   70:  // Nothing to do
3:   71:  return;
-:   72:}
-:   73:
-:   74:
function ctutil_PrepareChangeableFile called 2 returned 100% blocks executed 68%
2:   75:statusCode_t ctutil_PrepareChangeableFile(char const * const szFilePath,
-:   76:                                          ctutil_ChangeableFile_t * * const ppFileHandle)
-:   77:{
2:   78:  statusCode_t status = CTUTIL_SUCCESS;
2:   79:  size_t const originalPathLength = strlen(szFilePath);
-:   80:
-:   81:  // Prepare file handle
2*:   82:  WC_ASSERT(*ppFileHandle == NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 2
call    2 never executed
2:   83:  *ppFileHandle = malloc(sizeof(ctutil_ChangeableFile_t));
2:   84:  ctutil_ChangeableFile_t * const pFile = *ppFileHandle;
2:   85:  if(pFile == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:   86:  {
#####:   87:    status = CTUTIL_FAILED;
-:   88:  }
-:   89:
-:   90:  // Prepare original file path
2:   91:  if(ctutil_IsStatusOk(status))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
-:   92:  {
2:   93:    pFile->szOriginalPath = malloc(originalPathLength + 1);
2:   94:    if(pFile->szOriginalPath == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:   95:    {
#####:   96:      status = CTUTIL_FAILED;
#####:   97:      free(pFile);
#####:   98:      *ppFileHandle = NULL;
-:   99:    }
-:  100:    else
-:  101:    {
2:  102:      strncpy(pFile->szOriginalPath, szFilePath, originalPathLength);
2:  103:      pFile->szOriginalPath[originalPathLength] = '\0';
-:  104:    }
-:  105:  }
-:  106:
-:  107:  // Prepare write file path
2:  108:  if(ctutil_IsStatusOk(status))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
-:  109:  {
2:  110:    pFile->szWriteFilePath = malloc(originalPathLength + 2);
2:  111:    if(pFile->szWriteFilePath == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
-:  112:    {
#####:  113:      status = CTUTIL_FAILED;
#####:  114:      free(pFile->szOriginalPath);
#####:  115:      free(pFile);
#####:  116:      *ppFileHandle = NULL;
-:  117:    }
-:  118:    else
-:  119:    {
2:  120:      strncpy(pFile->szWriteFilePath, szFilePath, originalPathLength);
2:  121:      pFile->szWriteFilePath[originalPathLength] = '-';
2:  122:      pFile->szWriteFilePath[originalPathLength + 1] = '\0';
-:  123:    }
-:  124:  }
-:  125:
2:  126:  if(ctutil_IsStatusOk(status))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
-:  127:  {
2*:  128:    WC_ASSERT(*ppFileHandle != NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 2
call    2 never executed
-:  129:  }
-:  130:  else
-:  131:  {
#####:  132:    WC_ASSERT(*ppFileHandle == NULL);
branch  0 never executed
branch  1 never executed
call    2 never executed
-:  133:  }
-:  134:
2:  135:  return status;
-:  136:}
-:  137:
-:  138:
function ctutil_ReleaseFileForChanges called 3 returned 100% blocks executed 100%
3:  139:void ctutil_ReleaseFileForChanges(ctutil_ChangeableFile_t * * const ppFileHandle)
-:  140:{
3:  141:  ctutil_ChangeableFile_t * const pFile = *ppFileHandle;
3:  142:  if(pFile != NULL)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
-:  143:  {
2:  144:    free(pFile->szOriginalPath);
2:  145:    free(pFile->szWriteFilePath);
2:  146:    free(pFile);
2:  147:    *ppFileHandle = NULL;
-:  148:  }
3:  149:}
-:  150:
-:  151:
function ctutil_GetOriginalFilePath called 3 returned 100% blocks executed 100%
3:  152:char const * ctutil_GetOriginalFilePath(ctutil_ChangeableFile_t const * const pFileHandle)
-:  153:{
3:  154:  return pFileHandle->szOriginalPath;
-:  155:}
-:  156:
-:  157:
function ctutil_GetChangeableFilePath called 3 returned 100% blocks executed 100%
3:  158:char const * ctutil_GetChangeableFilePath(ctutil_ChangeableFile_t const * const pFileHandle)
-:  159:{
3:  160:  return pFileHandle->szWriteFilePath;
-:  161:}
-:  162:
-:  163:
function ctutil_CommitChangeableFile called 1 returned 100% blocks executed 80%
1:  164:statusCode_t ctutil_CommitChangeableFile(ctutil_ChangeableFile_t const * const pFileHandle)
-:  165:{
1:  166:  statusCode_t status = CTUTIL_SUCCESS;
1:  167:  char const * const szOriginalPath = ctutil_GetOriginalFilePath(pFileHandle);
call    0 returned 1
1:  168:  char const * const szModifiedPath = ctutil_GetChangeableFilePath(pFileHandle);
call    0 returned 1
-:  169:
-:  170:  struct stat stOriginalFileStat;
1:  171:  int const statOriginalResult = lstat(szOriginalPath, &stOriginalFileStat);
call    0 returned 1
1:  172:  if(statOriginalResult != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
-:  173:  {
#####:  174:    status = CTUTIL_FILE_OPEN_ERROR;
-:  175:  }
1:  176:  if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  177:  {
1:  178:    int const modChangeResult = chmod(szModifiedPath, stOriginalFileStat.st_mode);
call    0 returned 1
1:  179:    if(modChangeResult == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
-:  180:    {
1:  181:      int const ownChangeResult = chown(szModifiedPath, stOriginalFileStat.st_uid, stOriginalFileStat.st_gid);
call    0 returned 1
1:  182:      if(ownChangeResult != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
-:  183:      {
#####:  184:        status = CTUTIL_SYSTEM_CALL_ERROR;
-:  185:      }
-:  186:    }
-:  187:    else
-:  188:    {
#####:  189:      status = CTUTIL_SYSTEM_CALL_ERROR;
-:  190:    }
-:  191:  }
1:  192:  if(ctutil_IsStatusOk(status))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
-:  193:  {
1:  194:    int const renameResult = rename(szModifiedPath, szOriginalPath);
call    0 returned 1
1:  195:    if(renameResult != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
-:  196:    {
#####:  197:      status = CTUTIL_SYSTEM_CALL_ERROR;
-:  198:    }
-:  199:  }
-:  200:
1:  201:  return status;
-:  202:}
-:  203:
-:  204:
-:  205://---- End of source file ------------------------------------------------------
-:  206:
