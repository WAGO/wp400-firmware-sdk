-:    0:Source:test-src/config_linux_user/test_PasswordHashing.cc
-:    1://------------------------------------------------------------------------------
-:    2:// This Source Code Form is subject to the terms of the Mozilla Public
-:    3:// License, v. 2.0. If a copy of the MPL was not distributed with this
-:    4:// file, You can obtain one at http://mozilla.org/MPL/2.0/.
-:    5://
-:    6:// This file is part of project modular-config-tools (PTXdist package modular-config-tools).
-:    7://
-:    8:// Copyright (c) 2017-2022 WAGO GmbH & Co. KG
-:    9://------------------------------------------------------------------------------
-:   10://------------------------------------------------------------------------------
-:   11:///  \file     test_PasswordHashing.cc
-:   12:///
-:   13:///  \brief    Tests for password hashing in config tool config_linux_user.
-:   14:///
-:   15:///  \author   PEn: WAGO GmbH & Co. KG
-:   16://------------------------------------------------------------------------------
-:   17:
-:   18://------------------------------------------------------------------------------
-:   19:// include files
-:   20://------------------------------------------------------------------------------
-:   21:#include "shadow_functions.h"
-:   22:#include "resources.h"
-:   23:#include <gtest/gtest.h>
-:   24:#include "testutil/file_operations.hpp"
-:   25:#include <unistd.h>
-:   26:#include <cstring>
-:   27:
-:   28://------------------------------------------------------------------------------
-:   29:// macros
-:   30://------------------------------------------------------------------------------
-:   31:#define TEST_RANDOM_BYTES_1_SIZE                                            (4U)
-:   32:#define TEST_RANDOM_BYTES_1_VALUE                                           (1U)
-:   33:
-:   34://------------------------------------------------------------------------------
-:   35:// defines; structure, enumeration and type definitions
-:   36://------------------------------------------------------------------------------
-:   37:class PasswordHashingTest_config_linux_user : public ::testing::Test
-:   38:{
-:   39:  private:
-:   40:    std::string tempDir;
-:   41:    std::string lastErrorFile;
-:   42:    std::string randSource;
-:   43:
-:   44:  protected:
-:   45:    ctutil_Resources_t stResources;
-:   46:
-:   47:  protected:
function _ZN37PasswordHashingTest_config_linux_userC2Ev called 3 returned 100% blocks executed 100%
3:   48:    PasswordHashingTest_config_linux_user() {};
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
3*:   49:    virtual ~PasswordHashingTest_config_linux_user() {};
------------------
_ZN37PasswordHashingTest_config_linux_userD0Ev:
function _ZN37PasswordHashingTest_config_linux_userD0Ev called 0 returned 0% blocks executed 0%
#####:   49:    virtual ~PasswordHashingTest_config_linux_user() {};
call    0 never executed
call    1 never executed
------------------
_ZN37PasswordHashingTest_config_linux_userD2Ev:
function _ZN37PasswordHashingTest_config_linux_userD2Ev called 3 returned 100% blocks executed 100%
3:   49:    virtual ~PasswordHashingTest_config_linux_user() {};
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
------------------
function _ZN37PasswordHashingTest_config_linux_user5SetUpEv called 3 returned 100% blocks executed 100%
3:   50:    virtual void SetUp()
-:   51:    {
-:   52:      // Prepare resources
3:   53:      memset(&(this->stResources), 0, sizeof(this->stResources));
3:   54:      this->stResources.pstSpecificResources = (ctutil_ResourcesSpecific_t *)malloc(sizeof(ctutil_ResourcesSpecific_t));
3:   55:      memset(this->stResources.pstSpecificResources, 0, sizeof(*(this->stResources.pstSpecificResources)));
-:   56:
3:   57:      tempDir = testutil_CreateTempDir("config_linux_user_");
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 3
call    4 returned 3
3:   58:      lastErrorFile = tempDir + "/test_error.txt";
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 3
call    4 returned 3
3:   59:      this->stResources.stCommonResources.szLastErrorFile = lastErrorFile.c_str();
call    0 returned 3
3:   60:      randSource = tempDir + "/test_rand_source.txt";
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 3
call    4 returned 3
3:   61:      this->stResources.pstSpecificResources->szRandomSource1 = randSource.c_str();
call    0 returned 3
3:   62:      this->stResources.pstSpecificResources->szRandomSource2 = "/dev/zero";
-:   63:
-:   64:      // Prepare test files
3:   65:      testutil_CreateFile(this->stResources.stCommonResources.szLastErrorFile);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
3:   66:      testutil_CreateFile(this->stResources.pstSpecificResources->szRandomSource1);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
3:   67:      uint8_t const arTestBytes[TEST_RANDOM_BYTES_1_SIZE] = { TEST_RANDOM_BYTES_1_VALUE,
-:   68:                                                              TEST_RANDOM_BYTES_1_VALUE,
-:   69:                                                              TEST_RANDOM_BYTES_1_VALUE,
-:   70:                                                              TEST_RANDOM_BYTES_1_VALUE};
3:   71:      size_t const random1Bytes = sizeof(arTestBytes);
3:   72:      testutil_AppendToFile(this->stResources.pstSpecificResources->szRandomSource1, arTestBytes, random1Bytes);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
3:   73:      sync();
call    0 returned 3
3:   74:    }
function _ZN37PasswordHashingTest_config_linux_user8TearDownEv called 3 returned 100% blocks executed 22%
3:   75:    virtual void TearDown()
-:   76:    {
-:   77:      // Clean test files
3*:   78:      EXPECT_TRUE(testutil_RemoveFile(this->stResources.pstSpecificResources->szRandomSource1));
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 3
call    4 returned 3
branch  5 taken 0 (fallthrough)
branch  6 taken 3
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
3*:   79:      EXPECT_TRUE(testutil_RemoveFile(this->stResources.stCommonResources.szLastErrorFile));
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 3
call    4 returned 3
branch  5 taken 0 (fallthrough)
branch  6 taken 3
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
3*:   80:      EXPECT_TRUE(testutil_RemoveDir(tempDir.c_str()));
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
call    5 returned 3
branch  6 taken 0 (fallthrough)
branch  7 taken 3
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 returned 3
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
-:   81:
-:   82:      // Clean resources and options
3:   83:      free(this->stResources.pstSpecificResources);
3:   84:    }
-:   85:};
-:   86:
-:   87://------------------------------------------------------------------------------
-:   88:// variables' and constants' definitions
-:   89://------------------------------------------------------------------------------
-:   90:
-:   91://------------------------------------------------------------------------------
-:   92:// test implementation
-:   93://------------------------------------------------------------------------------
4:   94:TEST_F(PasswordHashingTest_config_linux_user, CheckSetup)
-:   95:{
-:   96:  // Nothing to do here, everything is done in SetUp/TearDown
1:   97:}
------------------
_ZN53PasswordHashingTest_config_linux_user_CheckSetup_TestC2Ev:
function _ZN53PasswordHashingTest_config_linux_user_CheckSetup_TestC2Ev called 1 returned 100% blocks executed 100%
1:   94:TEST_F(PasswordHashingTest_config_linux_user, CheckSetup)
call    0 returned 1
------------------
_ZN53PasswordHashingTest_config_linux_user_CheckSetup_TestD0Ev:
function _ZN53PasswordHashingTest_config_linux_user_CheckSetup_TestD0Ev called 1 returned 100% blocks executed 100%
1:   94:TEST_F(PasswordHashingTest_config_linux_user, CheckSetup)
call    0 returned 1
call    1 returned 1
------------------
_ZN53PasswordHashingTest_config_linux_user_CheckSetup_TestD2Ev:
function _ZN53PasswordHashingTest_config_linux_user_CheckSetup_TestD2Ev called 1 returned 100% blocks executed 100%
1:   94:TEST_F(PasswordHashingTest_config_linux_user, CheckSetup)
call    0 returned 1
------------------
_ZN53PasswordHashingTest_config_linux_user_CheckSetup_Test8TestBodyEv:
function _ZN53PasswordHashingTest_config_linux_user_CheckSetup_Test8TestBodyEv called 1 returned 100% blocks executed 100%
1:   94:TEST_F(PasswordHashingTest_config_linux_user, CheckSetup)
-:   95:{
-:   96:  // Nothing to do here, everything is done in SetUp/TearDown
1:   97:}
------------------
-:   98:
-:   99:
4:  100:TEST_F(PasswordHashingTest_config_linux_user, GetBytesFromRandomSource)
-:  101:{
-:  102:  unsigned char arRandomBuffer[128];
1:  103:  size_t const bufferSize = sizeof(arRandomBuffer);
1:  104:  GetRandomBytes(&(this->stResources), arRandomBuffer, bufferSize);
1*:  105:  ASSERT_LT(TEST_RANDOM_BYTES_1_SIZE, bufferSize);
5:  106:  for(size_t i = 0; i < TEST_RANDOM_BYTES_1_SIZE; ++i)
-:  107:  {
4*:  108:    EXPECT_EQ(TEST_RANDOM_BYTES_1_VALUE, arRandomBuffer[i]);
-:  109:  }
1*:  110:  ASSERT_LE(TEST_RANDOM_BYTES_1_SIZE * 2, bufferSize);
5:  111:  for(size_t i = TEST_RANDOM_BYTES_1_SIZE; i < (TEST_RANDOM_BYTES_1_SIZE * 2); ++i)
-:  112:  {
4*:  113:    EXPECT_EQ(0U, arRandomBuffer[i]);
-:  114:  }
121:  115:  for(size_t i = (TEST_RANDOM_BYTES_1_SIZE * 2); i < bufferSize; ++i)
-:  116:  {
120*:  117:    ASSERT_EQ(0U, arRandomBuffer[i]);
-:  118:  }
-:  119:}
------------------
_ZN67PasswordHashingTest_config_linux_user_GetBytesFromRandomSource_TestC2Ev:
function _ZN67PasswordHashingTest_config_linux_user_GetBytesFromRandomSource_TestC2Ev called 1 returned 100% blocks executed 100%
1:  100:TEST_F(PasswordHashingTest_config_linux_user, GetBytesFromRandomSource)
call    0 returned 1
------------------
_ZN67PasswordHashingTest_config_linux_user_GetBytesFromRandomSource_TestD0Ev:
function _ZN67PasswordHashingTest_config_linux_user_GetBytesFromRandomSource_TestD0Ev called 1 returned 100% blocks executed 100%
1:  100:TEST_F(PasswordHashingTest_config_linux_user, GetBytesFromRandomSource)
call    0 returned 1
call    1 returned 1
------------------
_ZN67PasswordHashingTest_config_linux_user_GetBytesFromRandomSource_TestD2Ev:
function _ZN67PasswordHashingTest_config_linux_user_GetBytesFromRandomSource_TestD2Ev called 1 returned 100% blocks executed 100%
1:  100:TEST_F(PasswordHashingTest_config_linux_user, GetBytesFromRandomSource)
call    0 returned 1
------------------
_ZN67PasswordHashingTest_config_linux_user_GetBytesFromRandomSource_Test8TestBodyEv:
function _ZN67PasswordHashingTest_config_linux_user_GetBytesFromRandomSource_Test8TestBodyEv called 1 returned 100% blocks executed 31%
1:  100:TEST_F(PasswordHashingTest_config_linux_user, GetBytesFromRandomSource)
-:  101:{
-:  102:  unsigned char arRandomBuffer[128];
1:  103:  size_t const bufferSize = sizeof(arRandomBuffer);
1:  104:  GetRandomBytes(&(this->stResources), arRandomBuffer, bufferSize);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1*:  105:  ASSERT_LT(TEST_RANDOM_BYTES_1_SIZE, bufferSize);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
call   21 never executed
call   22 never executed
call   23 never executed
5:  106:  for(size_t i = 0; i < TEST_RANDOM_BYTES_1_SIZE; ++i)
branch  0 taken 4
branch  1 taken 1 (fallthrough)
-:  107:  {
4*:  108:    EXPECT_EQ(TEST_RANDOM_BYTES_1_VALUE, arRandomBuffer[i]);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 4
branch  4 taken 0 (fallthrough)
branch  5 taken 4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 4
call   19 never executed
call   20 never executed
call   21 never executed
-:  109:  }
1*:  110:  ASSERT_LE(TEST_RANDOM_BYTES_1_SIZE * 2, bufferSize);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0
call   21 never executed
call   22 never executed
call   23 never executed
5:  111:  for(size_t i = TEST_RANDOM_BYTES_1_SIZE; i < (TEST_RANDOM_BYTES_1_SIZE * 2); ++i)
branch  0 taken 4
branch  1 taken 1 (fallthrough)
-:  112:  {
4*:  113:    EXPECT_EQ(0U, arRandomBuffer[i]);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 4
branch  4 taken 0 (fallthrough)
branch  5 taken 4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 4
call   19 never executed
call   20 never executed
call   21 never executed
-:  114:  }
121:  115:  for(size_t i = (TEST_RANDOM_BYTES_1_SIZE * 2); i < bufferSize; ++i)
branch  0 taken 120
branch  1 taken 1 (fallthrough)
-:  116:  {
120*:  117:    ASSERT_EQ(0U, arRandomBuffer[i]);
call    0 returned 120
branch  1 taken 120 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 120
branch  4 taken 0 (fallthrough)
branch  5 taken 120
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 returned 120
branch 19 taken 120 (fallthrough)
branch 20 taken 0
call   21 never executed
call   22 never executed
call   23 never executed
-:  118:  }
-:  119:}
------------------
-:  120:
-:  121:
4:  122:TEST_F(PasswordHashingTest_config_linux_user, HashPassword)
-:  123:{
1:  124:  char szPassword[] = "secret";
1:  125:  char const * const szHashedPassword = CryptPwd(&(this->stResources), szPassword);
1*:  126:  ASSERT_NE((char const *)NULL, szHashedPassword);
-:  127:  // Expected format: $<ID>$<salt>$<hashed>, ID: 1 char, salt: 8..16 char, encrypted: 86 char in case of SHA512
1*:  128:  ASSERT_EQ('$', szHashedPassword[0]);
1*:  129:  ASSERT_NE('\0', szHashedPassword[1]);
1*:  130:  EXPECT_EQ('6', szHashedPassword[1]);
1*:  131:  ASSERT_EQ('$', szHashedPassword[2]);
-:  132:  // Random source isn't random in this test => salt is equal for every call
1:  133:  char const expectedSalt[17U] = { 47, 47, 47, 47, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, '$' };
1:  134:  size_t saltIndex = 0;
1:  135:  while(    (szHashedPassword[3 + saltIndex] != '\0')
17:  136:         && (szHashedPassword[3 + saltIndex] != '$'))
-:  137:  {
16*:  138:    ASSERT_EQ(expectedSalt[saltIndex], szHashedPassword[3 + saltIndex]);
16:  139:    ++saltIndex;
-:  140:  }
1*:  141:  ASSERT_GE(saltIndex, 8U);
1*:  142:  ASSERT_EQ('$', szHashedPassword[3 + saltIndex]);
1*:  143:  EXPECT_LE(86U, strlen(&(szHashedPassword[4 + saltIndex])));
-:  144:  // SHA512 for given password is known and in every test the same because salt isn't random in test
1:  145:  char const szExpectedHash[] = "65JlJIiNBA.vHagukTzD1/QrJkQlr2jloQMwd2ugZ2Sk6RW5FdQWp1IGOVfuTfDmu/pLByQATgRwP2F6edJr4/";
1*:  146:  EXPECT_STREQ(szExpectedHash, &(szHashedPassword[4 + saltIndex]));
-:  147:}
-:  148:
-:  149:
-:  150://---- End of source file ------------------------------------------------------
-:  151:
