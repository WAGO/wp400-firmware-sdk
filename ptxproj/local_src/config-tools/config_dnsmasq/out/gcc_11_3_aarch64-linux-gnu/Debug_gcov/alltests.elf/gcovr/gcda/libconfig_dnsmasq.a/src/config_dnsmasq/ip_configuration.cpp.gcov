-:    0:Source:src/config_dnsmasq/ip_configuration.cpp
-:    1://------------------------------------------------------------------------------
-:    2:/// Copyright (c) 2020-2024 WAGO GmbH & Co. KG
-:    3:///
-:    4:/// PROPRIETARY RIGHTS of WAGO GmbH & Co. KG are involved in
-:    5:/// the subject matter of this material. All manufacturing, reproduction,
-:    6:/// use, and sales rights pertaining to this subject matter are governed
-:    7:/// by the license agreement. The recipient of this software implicitly
-:    8:/// accepts the terms of the license.
-:    9://------------------------------------------------------------------------------
-:   10://------------------------------------------------------------------------------
-:   11:///
-:   12:///  \brief    Class representation of a port configuration
-:   13:///
-:   14:///  \author   MSc : WAGO GmbH & Co. KG
-:   15://------------------------------------------------------------------------------
-:   16:
-:   17:#include "ip_configuration.hpp"
-:   18:
-:   19:#include <boost/format.hpp>
-:   20:
-:   21:#include "error_handling.hpp"
-:   22:
-:   23:namespace configdnsmasq {
-:   24:
function _ZN13configdnsmasq16ip_configurationC2Ev called 1 returned 100% blocks executed 78%
1:   25:ip_configuration::ip_configuration()
-:   26:    :
1:   27:    host_name { "" } {
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 never executed
-:   28:
1:   29:}
-:   30:
function _ZN13configdnsmasq16ip_configuration15portIsAvailableERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
#####:   31:bool ip_configuration::portIsAvailable(const std::string &port) {
#####:   32:  auto p = std::find(port_name_list.begin(), port_name_list.end(), port);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
#####:   33:  return p != port_name_list.end();
call    0 never executed
call    1 never executed
-:   34:}
-:   35:
function _ZN13configdnsmasq16ip_configuration11getPortDataERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
#####:   36:port_data ip_configuration::getPortData(const std::string &port) {
function _ZZN13configdnsmasq16ip_configuration11getPortDataERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlT_E_clINS_9port_dataEEEDaS9_ called 0 returned 0% blocks executed 0%
#####:   37:  auto data = std::find_if(port_data_list.begin(), port_data_list.end(), [&port](auto d) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
#####:   38:    return d.port_name_ == port;
call    0 never executed
-:   39:  });
-:   40:
#####:   41:  erh_assert(data != port_data_list.end(), INVALID_PARAMETER,
call    0 never executed
call    1 never executed
#####:   42:             boost::format("There is no ip configuration for port %s") % port);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
-:   43:
#####:   44:  return *data;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
-:   45:}
-:   46:
-:   47:} // namespace configdnsmasq
