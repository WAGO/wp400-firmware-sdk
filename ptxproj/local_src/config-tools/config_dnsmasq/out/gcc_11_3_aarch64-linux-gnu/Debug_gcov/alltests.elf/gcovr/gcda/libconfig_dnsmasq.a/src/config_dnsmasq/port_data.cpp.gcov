-:    0:Source:src/config_dnsmasq/port_data.cpp
-:    1://------------------------------------------------------------------------------
-:    2:/// Copyright (c) 2020-2024 WAGO GmbH & Co. KG
-:    3:///
-:    4:/// PROPRIETARY RIGHTS of WAGO GmbH & Co. KG are involved in
-:    5:/// the subject matter of this material. All manufacturing, reproduction,
-:    6:/// use, and sales rights pertaining to this subject matter are governed
-:    7:/// by the license agreement. The recipient of this software implicitly
-:    8:/// accepts the terms of the license.
-:    9://------------------------------------------------------------------------------
-:   10://------------------------------------------------------------------------------
-:   11:///
-:   12:///  \brief    Class representation of a port configuration
-:   13:///
-:   14:///  \author   MSc : WAGO GmbH & Co. KG
-:   15://------------------------------------------------------------------------------
-:   16:
-:   17:#include "port_data.hpp"
-:   18:
-:   19:#include <Types.hpp>
-:   20:#include <boost/algorithm/string.hpp>
-:   21:#include <boost/asio.hpp>
-:   22:#include <boost/format.hpp>
-:   23:#include <optional>
-:   24:
-:   25:#include "error_handling.hpp"
-:   26:#include "utilities.hpp"
-:   27:
-:   28:namespace configdnsmasq {
-:   29:
-:   30:namespace {
-:   31:
function _ZN13configdnsmasq12_GLOBAL__N_118GetInterfaceStatusERKSt6vectorIN7netconf15InterfaceStatusESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 92%
4:   32:std::optional<netconf::InterfaceStatus> GetInterfaceStatus(const netconf::InterfaceStatuses& statuses, const std::string& name) {
function _ZZN13configdnsmasq12_GLOBAL__N_118GetInterfaceStatusERKSt6vectorIN7netconf15InterfaceStatusESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRKS3_E_clESH_ called 6 returned 100% blocks executed 100%
4:   33:  auto it = find_if(statuses.cbegin(), statuses.cend(), [& name](const netconf::InterfaceStatus& status){
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
6:   34:    return status.interface_.GetName() == name;
call    0 returned 6
call    1 returned 6
call    2 returned 6
-:   35:  });
-:   36:
4:   37:  if(it != statuses.cend()) {
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0
4:   38:    return *it;
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
-:   39:  }
#####:   40:  return std::nullopt;
call    0 never executed
-:   41:}
-:   42:
-:   43:}
-:   44:
function _ZN13configdnsmasq9port_dataC2Ev called 4 returned 100% blocks executed 44%
4:   45:port_data::port_data()
-:   46:    :
4:   47:    port_name_ { "" },
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 4
call    4 never executed
call    5 never executed
4:   48:    state_ { "" },
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 4
call    5 never executed
4:   49:    link_state_ { netconf::LinkState::UNKNOWN },
4:   50:    type_ { "" },
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 4
call    5 never executed
4:   51:    ip_addr_ { "0.0.0.0" },
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 4
call    5 never executed
4:   52:    netmask_ { "0.0.0.0" },
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 4
call    5 never executed
4:   53:    ip_addr_bin_ { 0 },
4:   54:    netmask_bin_ { 0 },
4:   55:    network_bin_ { 0 } {
call    0 returned 4
4:   56:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
-:   57:
function _ZN13configdnsmasq9port_data8setStateERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN7netconf3api12BridgeConfigENSA_16InterfaceConfigsE called 4 returned 100% blocks executed 83%
4:   58:void port_data::setState(const std::string &bridge, const napi::BridgeConfig &bridgeConfig,
-:   59:                        napi::InterfaceConfigs interfaceConfig) {
4:   60:  bool bridgeInterfacesDown = areAllBridgeInterfacesDown(bridge, bridgeConfig, interfaceConfig);
call    0 returned 4
4*:   61:  state_ = bridgeInterfacesDown ? "disabled" : "enabled";
branch  0 taken 0 (fallthrough)
branch  1 taken 4
call    2 returned 4
4:   62:}
-:   63:
function _ZN13configdnsmasq9port_data12setLinkStateERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN7netconf3api12BridgeConfigERKSt6vectorINS9_15InterfaceStatusESaISF_EE called 4 returned 100% blocks executed 80%
4:   64:void port_data::setLinkState(const std::string &bridge, const napi::BridgeConfig &bridgeConfig,
-:   65:                            const netconf::InterfaceStatuses& interfaceStatuses) {
4:   66:  bool bridgeInterfacesDown = areAllBridgeInterfacesLowerDown(bridge, bridgeConfig, interfaceStatuses);
call    0 returned 4
4*:   67:  link_state_ = bridgeInterfacesDown ? netconf::LinkState::DOWN : netconf::LinkState::UP;
branch  0 taken 0 (fallthrough)
branch  1 taken 4
4:   68:}
-:   69:
function _ZN13configdnsmasq9port_data12setIpAddressERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 80%
4:   70:void port_data::setIpAddress(const std::string &address) {
4:   71:  ip_addr_ = address;
call    0 returned 4
4:   72:  auto status = conv_ip_ascii2bin(ip_addr_bin_, address);
call    0 returned 4
8:   73:  erh_assert(SUCCESS == status, INVALID_PARAMETER,
4:   74:      boost::format("The ip address %s is invalid and cannot be converted to a binary representation") % address);
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 4
call    8 never executed
-:   75:
4:   76:  network_bin_ = ip_addr_bin_ & netmask_bin_;
4:   77:}
-:   78:
function _ZN13configdnsmasq9port_data10setNetmaskERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 80%
4:   79:void port_data::setNetmask(const std::string &netmask) {
4:   80:  netmask_ = netmask;
call    0 returned 4
4:   81:  auto status = conv_ip_ascii2bin(netmask_bin_, netmask);
call    0 returned 4
8:   82:  erh_assert(SUCCESS == status, INVALID_PARAMETER,
4:   83:      boost::format("The netmask %s is invalid and cannot be converted to a binary representation") % netmask);
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 4
call    8 never executed
-:   84:
4:   85:  network_bin_ = ip_addr_bin_ & netmask_bin_;
4:   86:}
-:   87:
function _ZN13configdnsmasq9port_data7setTypeERKN7netconf8IPConfigE called 4 returned 100% blocks executed 60%
4:   88:void port_data::setType(const netconf::IPConfig &ip_config) {
4:   89:  switch (ip_config.source_) {
branch  0 taken 2
branch  1 taken 2
branch  2 taken 0
branch  3 taken 0
2:   90:    case netconf::IPSource::STATIC:
2:   91:      type_ = "static";
call    0 returned 2
2:   92:      break;
2:   93:    case netconf::IPSource::DHCP:
2:   94:      type_ = "dhcp";
call    0 returned 2
2:   95:      break;
#####:   96:    case netconf::IPSource::BOOTP:
#####:   97:      type_ = "bootp";
call    0 never executed
#####:   98:      break;
#####:   99:    default:
#####:  100:      type_ = "unknown";
call    0 never executed
#####:  101:      break;
-:  102:  }
4:  103:}
-:  104:
-:  105:// We do not check lower-down state here.
function _ZN13configdnsmasq9port_data26areAllBridgeInterfacesDownERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN7netconf3api12BridgeConfigERNSA_16InterfaceConfigsE called 4 returned 100% blocks executed 83%
4:  106:bool port_data::areAllBridgeInterfacesDown(
-:  107:  const std::string &bridge_name,
-:  108:  const napi::BridgeConfig& bridge_config,
-:  109:  napi::InterfaceConfigs& interface_config) {
-:  110:
4:  111:  auto interface_names = bridge_config.GetBridgeInterfaces(bridge_name);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
function _ZZN13configdnsmasq9port_data26areAllBridgeInterfacesDownERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN7netconf3api12BridgeConfigERNSA_16InterfaceConfigsEENKUlS8_E_clES8_ called 4 returned 100% blocks executed 90%
4:  112:  auto up = find_if(interface_names.begin(), interface_names.end(), [& interface_config](const ::std::string& name) {
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
4:  113:    auto optional_interface = interface_config.GetInterfaceConfig(name);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
8*:  114:    return optional_interface ? optional_interface->state_ == netconf::InterfaceState::UP : false;
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
call    3 returned 4
4:  115:  });
call    0 returned 4
-:  116:
8:  117:  return up == interface_names.end();
call    0 returned 4
call    1 returned 4
4:  118:}
call    0 returned 4
call    1 never executed
-:  119:
function _ZN13configdnsmasq9port_data31areAllBridgeInterfacesLowerDownERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN7netconf3api12BridgeConfigERKSt6vectorINS9_15InterfaceStatusESaISF_EE called 4 returned 100% blocks executed 83%
4:  120:bool port_data::areAllBridgeInterfacesLowerDown(
-:  121:  const std::string &bridge_name,
-:  122:  const napi::BridgeConfig& bridge_config,
-:  123:  const netconf::InterfaceStatuses& interface_statuses) {
-:  124:
4:  125:  auto interface_names = bridge_config.GetBridgeInterfaces(bridge_name);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
function _ZZN13configdnsmasq9port_data31areAllBridgeInterfacesLowerDownERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN7netconf3api12BridgeConfigERKSt6vectorINS9_15InterfaceStatusESaISF_EEENKUlS8_E_clES8_ called 4 returned 100% blocks executed 90%
4:  126:  auto up = find_if(interface_names.begin(), interface_names.end(), [& interface_statuses](const ::std::string& name) {
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
4:  127:    auto optional_interface = GetInterfaceStatus(interface_statuses, name);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
8*:  128:    return optional_interface ? optional_interface->link_state_ == netconf::LinkState::UP : false;
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
call    3 returned 4
4:  129:  });
call    0 returned 4
-:  130:
8:  131:  return up == interface_names.end();
call    0 returned 4
call    1 returned 4
4:  132:}
call    0 returned 4
call    1 never executed
-:  133:
function _ZN13configdnsmasq9port_data19has_valid_ip_configEv called 0 returned 0% blocks executed 0%
#####:  134:bool port_data::has_valid_ip_config() {
#####:  135:    return (!ip_addr_.empty()
call    0 never executed
#####:  136:        && ip_addr_ != "0.0.0.0"
call    0 never executed
branch  1 never executed
branch  2 never executed
#####:  137:        && !netmask_.empty()
call    0 never executed
branch  1 never executed
branch  2 never executed
#####:  138:        && netmask_ != "0.0.0.0" );
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
-:  139:}
-:  140:
-:  141:} // namespace configdnsmasq
