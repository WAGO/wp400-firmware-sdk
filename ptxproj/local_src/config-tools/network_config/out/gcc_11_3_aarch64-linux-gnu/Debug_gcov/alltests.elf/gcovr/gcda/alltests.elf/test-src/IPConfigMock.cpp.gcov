-:    0:Source:test-src/IPConfigMock.cpp
-:    1:#include "IPConfigMock.hpp"
-:    2:
-:    3:namespace netconf {
-:    4:namespace api {
-:    5:
-:    6:using InstancePtr = ::std::unique_ptr<MockIPConfig, void(*)(MockIPConfig*)>;
-:    7:
function _ZNK7netconf3apiL10activeMockMUlPNS0_12MockIPConfigEE_clES2_ called 3 returned 100% blocks executed 100%
3:    8:static InstancePtr activeMock = { nullptr, []([[maybe_unused]]MockIPConfig* mock) {
3:    9:} };
-:   10:
function _ZN7netconf3api12MockIPConfigC2Ev called 3 returned 100% blocks executed 58%
3:   11:MockIPConfig::MockIPConfig() {
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 3
branch  8 taken 3 (fallthrough)
branch  9 taken 0 (throw)
3:   12:  activeMock.reset(this);
call    0 returned 3
3:   13:}
call    0 never executed
call    1 never executed
call    2 never executed
function _ZN7netconf3api12MockIPConfigD2Ev called 3 returned 100% blocks executed 100%
3:   14:MockIPConfig::~MockIPConfig() {
3:   15:  activeMock.reset();
call    0 returned 3
3:   16:}
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
-:   17:
function _ZN7netconf3api12GetIPConfigsERNS0_9IPConfigsE called 1 returned 100% blocks executed 60%
1:   18:Status GetIPConfigs(IPConfigs& config) {
1:   19:  if (activeMock) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
1:   20:    return activeMock->GetIPConfigs(config);
call    0 returned 1
call    1 returned 1
-:   21:  }
#####:   22:  throw std::runtime_error("No active mock! Instantiate MockIPConfig in your test");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
-:   23:}
-:   24:
function _ZN7netconf3api19GetCurrentIPConfigsERNS0_9IPConfigsE called 0 returned 0% blocks executed 0%
#####:   25:Status GetCurrentIPConfigs(IPConfigs& config) {
#####:   26:  if (activeMock) {
call    0 never executed
branch  1 never executed
branch  2 never executed
#####:   27:    return activeMock->GetCurrentIPConfigs(config);
call    0 never executed
call    1 never executed
-:   28:  }
#####:   29:  throw std::runtime_error("No active mock! Instantiate MockIPConfig in your test");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
-:   30:}
-:   31:
function _ZN7netconf3api12SetIPConfigsERKNS0_9IPConfigsE called 1 returned 100% blocks executed 60%
1:   32:Status SetIPConfigs(const IPConfigs &config) {
1:   33:  if (activeMock) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
1:   34:    return activeMock->SetIPConfigs(config);
call    0 returned 1
call    1 returned 1
-:   35:  }
#####:   36:  throw std::runtime_error("No active mock! Instantiate MockIPConfig in your test");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
-:   37:}
-:   38:
function _ZN7netconf3api12SetTempFixIpEv called 0 returned 0% blocks executed 0%
#####:   39:Status SetTempFixIp() {
#####:   40:  if (activeMock) {
call    0 never executed
branch  1 never executed
branch  2 never executed
#####:   41:    return activeMock->SetTempFixIp();
call    0 never executed
call    1 never executed
-:   42:  }
#####:   43:  throw std::runtime_error("No active mock! Instantiate MockIPConfig in your test");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
-:   44:
-:   45:}
-:   46:
-:   47:}  // namespace api
-:   48:}  // namespace netconf
