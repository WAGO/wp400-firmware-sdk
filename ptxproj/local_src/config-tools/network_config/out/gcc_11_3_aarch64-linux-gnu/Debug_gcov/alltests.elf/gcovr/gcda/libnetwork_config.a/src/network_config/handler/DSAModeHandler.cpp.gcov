-:    0:Source:src/network_config/handler/DSAModeHandler.cpp
-:    1:// SPDX-License-Identifier: GPL-2.0-or-later
-:    2:
-:    3:#include "DSAModeHandler.hpp"
-:    4:
-:    5:#include <string>
-:    6:#include <iostream>
-:    7:#include <exception>
-:    8:
-:    9:#include "BridgeConfig.hpp"
-:   10:#include "Utils.hpp"
-:   11:#include "NetconfStatus.hpp"
-:   12:
-:   13:namespace network_config {
-:   14:
-:   15:namespace napi = ::netconf::api;
-:   16:
function _ZN14network_config14DSAModeHandlerC2ERKN5boost15program_options13variables_mapE called 4 returned 100% blocks executed 57%
4:   17:DSAModeHandler::DSAModeHandler(const ::boost::program_options::variables_map &vm)
4:   18:    : vm_ { vm } {
call    0 returned 4
call    1 returned 4
-:   19:
4:   20:  if (vm_.count("get") > 0) {
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 4
call    8 returned 4
branch  9 taken 1 (fallthrough)
branch 10 taken 3
call   11 never executed
call   12 never executed
function _ZZN14network_config14DSAModeHandlerC4ERKN5boost15program_options13variables_mapEENKUlvE_clEv called 1 returned 100% blocks executed 100%
1:   21:    execute_ = [this]() {
1:   22:      this->GetConfig();
call    0 returned 1
1:   23:    };
call    0 returned 1
3:   24:  } else if (vm_.count("set") > 0) {
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 3
call    8 returned 3
branch  9 taken 3 (fallthrough)
branch 10 taken 0
call   11 never executed
call   12 never executed
function _ZZN14network_config14DSAModeHandlerC4ERKN5boost15program_options13variables_mapEENKUlvE0_clEv called 3 returned 100% blocks executed 100%
3:   25:    execute_ = [this]() {
3:   26:      this->SetConfig();
call    0 returned 3
3:   27:    };
call    0 returned 3
-:   28:  }
4:   29:}
call    0 never executed
call    1 never executed
-:   30:
function _ZN14network_config14DSAModeHandler7ExecuteEv called 4 returned 100% blocks executed 100%
4:   31:void DSAModeHandler::Execute() {
4:   32:  execute_();
call    0 returned 4
4:   33:}
-:   34:
function _ZN14network_config14DSAModeHandler9GetConfigEv called 1 returned 100% blocks executed 47%
1:   35:void DSAModeHandler::GetConfig() {
1:   36:  napi::BridgeConfig bridge_config;
call    0 returned 1
1:   37:  auto error = napi::GetBridgeConfig(bridge_config);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
1:   38:  if (error.IsNotOk()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
#####:   39:    throw NetconfStatus(error);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
-:   40:  }
-:   41:
2:   42:  auto bridgeOfX1 = bridge_config.GetBridgeOfInterface("ethX1");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
2:   43:  auto bridgeOfX2 = bridge_config.GetBridgeOfInterface("ethX2");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
-:   44:
1*:   45:  if (bridgeOfX1 == "br0" && bridgeOfX2 == "br0") {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
#####:   46:    ::std::cout << "0";
call    0 never executed
branch  1 never executed
branch  2 never executed
1*:   47:  } else if (bridgeOfX1 == "br0" && bridgeOfX2 == "br1") {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
branch  6 taken 1 (fallthrough)
branch  7 taken 0
1:   48:    ::std::cout << "1";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
-:   49:  } else {
-:   50:    netconf::Status e { netconf::StatusCode::GENERIC_ERROR,
#####:   51:        "There is no valid dsa mode because interface X1 and/or X2 are not assigned to bridge br0 or br1." };
call    0 never executed
branch  1 never executed
branch  2 never executed
#####:   52:    throw NetconfStatus { e };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
=====:   53:  }
call    0 never executed
1:   54:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
-:   55:
function _ZN14network_config14DSAModeHandler9SetConfigEv called 3 returned 100% blocks executed 43%
3:   56:void DSAModeHandler::SetConfig() {
3:   57:  auto dsa_mode = GetValueOfSet(vm_);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
3:   58:  napi::BridgeConfig bridge_config;
call    0 returned 3
3:   59:  auto error = ::netconf::api::GetBridgeConfig(bridge_config);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
3:   60:  if (error.IsNotOk()) {
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
#####:   61:    throw NetconfStatus(error);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
-:   62:  }
-:   63:
3:   64:  if (dsa_mode == "0") {
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
2:   65:    bridge_config.AddBridge("br0");
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 2
call    8 returned 2
call    9 never executed
call   10 never executed
2:   66:    bridge_config.AssignInterfaceToBridge("ethX1", "br0");
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 2
call   12 returned 2
call   13 returned 2
call   14 returned 2
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
2:   67:    bridge_config.AssignInterfaceToBridge("ethX2", "br0");
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 2
call   12 returned 2
call   13 returned 2
call   14 returned 2
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
2:   68:    if (bridge_config.BridgeIsEmpty("br1")) {
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 2
call    8 returned 2
branch  9 taken 1 (fallthrough)
branch 10 taken 1
call   11 never executed
call   12 never executed
1:   69:      bridge_config.DeleteBridge("br1");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
call    9 never executed
call   10 never executed
-:   70:    }
1:   71:  } else if (dsa_mode == "1") {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
1:   72:    bridge_config.AddBridge("br0");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
call    9 never executed
call   10 never executed
1:   73:    bridge_config.AssignInterfaceToBridge("ethX1", "br0");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
1:   74:    bridge_config.AddBridge("br1");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
call    9 never executed
call   10 never executed
1:   75:    bridge_config.AssignInterfaceToBridge("ethX2", "br1");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
-:   76:  } else {
#####:   77:    netconf::Status e { netconf::StatusCode::GENERIC_ERROR, "Can not set the dsa mode because '" + dsa_mode
call    0 never executed
branch  1 never executed
branch  2 never executed
#####:   78:        + "' is no valid value. Your options are '0' for switched and '1' for separated mode." };
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
#####:   79:  }
call    0 never executed
-:   80:
3:   81:  error = napi::SetBridgeConfig(bridge_config);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 3
call    4 returned 3
3:   82:  if (error.IsNotOk()) {
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
#####:   83:    throw NetconfStatus { error };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
-:   84:  }
3:   85:}
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 never executed
call    4 never executed
call    5 never executed
-:   86:
-:   87:} /* namespace network_config */
