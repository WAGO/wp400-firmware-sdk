-:    0:Source:src/network_config/UriEscape.cpp
-:    1:// SPDX-License-Identifier: GPL-2.0-or-later
-:    2:#include <cstdlib>
-:    3:#include <glib.h>
-:    4:#include <UriEscape.hpp>
-:    5:#include <memory>
-:    6:
-:    7:/*
-:    8: * int main() {
-:    9: char *uri = "http://www.example.com?hello world";
-:   10: char *encoded_uri = NULL;
-:   11: //as per wiki (https://en.wikipedia.org/wiki/Percent-encoding)
-:   12: char *escape_char_str = "!*'();:@&=+$,/?#[]";
-:   13: encoded_uri = g_uri_escape_string(uri, escape_char_str, TRUE);
-:   14: printf("[%s]\n", encoded_uri);
-:   15: free(encoded_uri);
-:   16:
-:   17: return 0;
-:   18: }
-:   19: */
-:   20:
-:   21:using std::string;
-:   22:
function _ZN9UriEscapeC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 100%
6:   23:UriEscape::UriEscape(::std::string escape_chars)
6:   24:    : escape_chars_ { std::move(escape_chars) } {
call    0 returned 6
call    1 returned 6
6:   25:}
-:   26:
function _ZNK9UriEscape8UnescapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 71%
6:   27:::std::string UriEscape::Unescape(const ::std::string &escaped_uri) const {
-:   28:  auto result_cstr = std::unique_ptr<char, decltype(std::free)*>(
6:   29:      g_uri_unescape_string(escaped_uri.c_str(), escape_chars_.c_str()), std::free);
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 6
6:   30:  if (result_cstr != nullptr) {
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0
6:   31:    return std::string { result_cstr.get() };
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 6
call    6 never executed
-:   32:  }
#####:   33:  return std::string { };
call    0 never executed
6:   34:}
call    0 returned 6
call    1 never executed
-:   35:
function _ZNK9UriEscape8UnescapeB5cxx11EPKc called 0 returned 0% blocks executed 0%
#####:   36:::std::string UriEscape::Unescape(const char *escaped_uri) const {
#####:   37:  return Unescape(string { escaped_uri });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
-:   38:}
-:   39:
function _ZNK9UriEscape6EscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
#####:   40:::std::string UriEscape::Escape(const ::std::string &unescaped_uri) const {
-:   41:  auto result_cstr = std::unique_ptr<char, decltype(std::free)*>(
#####:   42:      g_uri_escape_string(unescaped_uri.c_str(), escape_chars_.c_str(), TRUE), std::free);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
#####:   43:  if (result_cstr != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
#####:   44:    return std::string { result_cstr.get() };
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
-:   45:  }
#####:   46:  return std::string { };
call    0 never executed
#####:   47:}
call    0 never executed
call    1 never executed
-:   48:
function _ZNK9UriEscape6EscapeB5cxx11EPKc called 0 returned 0% blocks executed 0%
#####:   49:::std::string UriEscape::Escape(const char *escaped_uri) const {
#####:   50:  return Escape(string { escaped_uri });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
-:   51:}
