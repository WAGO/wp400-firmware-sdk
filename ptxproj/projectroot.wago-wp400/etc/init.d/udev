#!/bin/sh

udev_root="/dev"
udev_rules="/lib/udev/rules.d"
udev_log="err"
eeprom_device="/sys/bus/i2c/devices/1-0054/eeprom"

# for new udevd
PATH=/usr/lib/udev:$PATH

make_extra_nodes () {
	# there are a few things that sysfs does not export for us.
	# these things go here (and remember to remove them in
	# remove_extra_nodes()
	#
	# Thanks to Gentoo for the initial list of these.
	if ! mount | grep -q devtmpfs; then
		ln -snf /proc/self/fd /dev/fd
		ln -snf /proc/self/fd/0 /dev/stdin
		ln -snf /proc/self/fd/1 /dev/stdout
		ln -snf /proc/self/fd/2 /dev/stderr
		ln -snf /proc/kcore /dev/core

		mknod /dev/null c 1 3
		mknod /dev/console c 5 1
		mknod /dev/zero c 1 5
	fi

	mkdir /dev/pts
	mkdir /dev/shm
}

load_pca955x () {
    modprobe leds-pca955x
    local DIR="/sys/bus/i2c/devices/1-0061/leds"
	if [ ! -d "$DIR" ]; then
	   # failure repetition
	   echo "modprobe leds-pca955x FAILED" >> /tmp/leds-pca955x.log
	   usleep 500000
	   modprobe leds-pca955x
	fi
}

show_bootscreen () {
	mknod /dev/fb0 c 29 0

	# read devconf from eeprom
	devconf=$(hexdump -v -s 0x00001fe -n 2 $eeprom_device | head -n 1 | cut  -f 2 -d ' ')
	if [ "$devconf" = "1000" ]; then
		xres="480"
	elif [ "$devconf" = "1001" ]; then
		xres="640"
	elif [ "$devconf" = "1002" ]; then
		xres="800"
	elif [ "$devconf" = "1003" ]; then
		xres="1280"
	elif [ "$devconf" = "1008" ]; then
		xres="1920"
	elif [ "$devconf" = "1009" ]; then
		xres="1920"
	elif [ "$devconf" = "1010" ]; then
		xres="1920"
	elif [ "$devconf" = "1015" ]; then
		xres="800"
	elif [ "$devconf" = "1016" ]; then
		xres="1280"
	elif [ "$devconf" = "1017" ]; then
		xres="1920"
	else
		echo "screen resolution touch not recognized set default 800x480"
		xres="800"
	fi

	# get orientation from eeprom
	orientation=$(hexdump -v -s 0x00001f8 -n 2 $eeprom_device | head -n 1 | cut  -f 2 -d ' ')
	orientation=$(echo ${orientation:3})
	bootscreenfile=/etc/bootscreen/bootscreen_
	if [ "$orientation" == 0 ] ; then
		addchar="0_"
		bootscreenfile=$bootscreenfile$addchar
	elif [ "$orientation" == 1 ] ; then
		addchar="cw_"
		bootscreenfile=$bootscreenfile$addchar
	elif [ "$orientation" == 2 ] ; then
		addchar="ud_"
		bootscreenfile=$bootscreenfile$addchar
	elif [ "$orientation" == 3 ] ; then
		addchar="ccw_"
		bootscreenfile=$bootscreenfile$addchar
	else
		echo "eeprom screen orientation touch not recognized, set default orientation 0"
		addchar="0_"
		bootscreenfile=$bootscreenfile$addchar
	fi

	addchar=".png"
	bootscreenfile=$bootscreenfile$xres$addchar
	#echo "#### bootscreenfile=$bootscreenfile"

	if [ -e "$bootscreenfile" ]; then
		/usr/bin/fbv -i $bootscreenfile 2>&1 > /dev/null &
	else
		echo "bootscreen not found ${bootscreenfile}"
	fi
	echo 0 > /sys/class/graphics/fb0/blank
	for i in {0..255..1}
	do
		echo $i > /sys/class/backlight/backlight/brightness
	done
}

set_profile () {
	profi=/etc/profile_cap_

	if [ "$orientation" == 0 ] ; then
		addchar="0"
		profi=$profi$addchar
	elif [ "$orientation" == 1 ] ; then
		addchar="cw"
		profi=$profi$addchar
	elif [ "$orientation" == 2 ] ; then
		addchar="ud"
		profi=$profi$addchar
	elif [ "$orientation" == 3 ] ; then
		addchar="ccw"
		profi=$profi$addchar
	else
		echo "profile screen orientation touch not recognized, set default orientation 0"
		addchar="0"
		profi=$profi$addchar
	fi
	#echo "#### profile= ${profi}"

	if [ -e "$profi" ] ; then
		rm /etc/profile
		ln -s $profi /etc/profile
		source /etc/profile > /dev/null 2>&1
	else
		echo "profile not found profile= ${profi}"
	fi
}

case $1 in
start)
	echo "starting udev"

	# don't use udev if sysfs is not mounted.
	if [ ! -d /sys/kernel ]; then
		echo "failed"
		echo "error: sysfs not mounted"
		exit 1
	fi

	# only mount a tmpfs if devtmpfs is not already there
	if ! mount | grep -q devtmpfs; then
		# The reason we don't write to mtab is because we don't ever
		# want /dev to be unavailable (such as by `umount -a').
		echo "mounting tmpfs at $udev_root"
		mount -n -t tmpfs tmpfs $udev_root -o mode=755
	fi

	# The /run is used by udev and must be mounted at this early stage
	if ! mountpoint -q /run; then
		echo "mounting tmpfs at /run"
		mount -n -t tmpfs tmpfs /run -o mode=755
	fi

	# udev handles uevents itself, so we don't need to have
	# the kernel call out to any binary in response to them
	if [ -e /sys/kernel/uevent_helper ]; then
		echo > /proc/sys/kernel/hotplug
	fi

	echo "creating static nodes"
	make_extra_nodes

	count=$(dmesg | grep -c "timed")
	if [ $count -ne 0 ]; then
		reboot -f
	fi

	#echo "show bootscreen"
	show_bootscreen
	echo 255 > /sys/class/backlight/backlight/brightness 

    # Load module LEDs
    #load_pca955x

	# Start the udev daemon to continually
	# watch for, and act on, uevents
	echo -n "starting udevd..."
	udevd --daemon
	if [ "$?" = "0" ]; then
		echo "done"
	else
		echo "failed"
	fi

	# Now traverse sys/ in order to "coldplug"
	# devices that have already been discovered
	udevadm trigger --action=add
	# Now wait for udevd to process
	# the uevents we triggered
	echo -n "waiting for devices..."
	udevadm settle --timeout=10
	if [ "$?" = "0" ]; then
		echo "done"
	else
		echo "failed"
	fi

	# We can only mount /dev/pts after initialising udev
	if [ -d "/dev/pts" ]; then
		mount /dev/pts
	fi

	#echo "set_profile"
	set_profile

	exit 0

	;;
stop)
	echo "stopping udevd... error, udevd cannot be stopped, aborting"
	;;
*)
	echo "usage: $0 [start|stop]"
	;;
esac

